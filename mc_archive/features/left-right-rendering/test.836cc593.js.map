{"version":3,"sources":["node_modules/wikibase-sdk/lib/utils/utils.js","node_modules/wikibase-sdk/lib/helpers/simplify_text_attributes.js","node_modules/wikibase-sdk/lib/helpers/wikibase_time_to_date_object.js","node_modules/wikibase-sdk/lib/helpers/helpers.js","node_modules/wikibase-sdk/lib/helpers/parse_claim.js","node_modules/wikibase-sdk/lib/helpers/rank.js","node_modules/wikibase-sdk/lib/helpers/simplify_claims.js","node_modules/wikibase-sdk/lib/helpers/simplify_forms.js","node_modules/wikibase-sdk/lib/helpers/simplify_senses.js","node_modules/wikibase-sdk/lib/helpers/sitelinks_languages.js","node_modules/wikibase-sdk/lib/helpers/sitelinks.js","node_modules/wikibase-sdk/lib/helpers/simplify_sitelinks.js","node_modules/wikibase-sdk/lib/helpers/simplify_sparql_results.js","node_modules/wikibase-sdk/lib/helpers/simplify.js","node_modules/wikibase-sdk/lib/helpers/simplify_entity.js","node_modules/wikibase-sdk/lib/helpers/parse_responses.js","node_modules/querystring-es3/decode.js","node_modules/querystring-es3/encode.js","node_modules/querystring-es3/index.js","node_modules/wikibase-sdk/lib/utils/build_url.js","node_modules/wikibase-sdk/lib/queries/search_entities.js","node_modules/wikibase-sdk/lib/queries/cirrus_search.js","node_modules/wikibase-sdk/lib/helpers/validate.js","node_modules/wikibase-sdk/lib/queries/get_entities.js","node_modules/wikibase-sdk/lib/queries/get_many_entities.js","node_modules/wikibase-sdk/lib/queries/get_revisions.js","node_modules/wikibase-sdk/lib/queries/get_entity_revision.js","node_modules/wikibase-sdk/lib/queries/get_entities_from_sitelinks.js","node_modules/wikibase-sdk/lib/queries/sparql_query.js","node_modules/wikibase-sdk/lib/queries/get_reverse_claims.js","node_modules/wikibase-sdk/lib/wikibase-sdk.js","node_modules/wikidata-sdk/wikidata-sdk.js","assets/colors.json","Utils.ts","test.ts"],"names":["module","exports","shortLang","language","toLowerCase","split","forceArray","array","isPlainObject","obj","Array","fixedEncodeURIComponent","str","encodeURIComponent","replace","encodeCharacter","replaceSpaceByUnderscores","uniq","from","Set","char","charCodeAt","toString","simplifyTextAttributes","multivalue","data","simplified","Object","keys","forEach","lang","map","getValue","value","singleValue","labels","descriptions","aliases","lemmas","representations","glosses","wikibaseTime","time","sign","yearMonthDay","withinDay","slice","rest","fullDateData","year","needsExpandedYear","length","expandedYearDate","Date","date","toDateObject","require","helpers","id","test","guid","hash","entityId","propertyId","isEntityId","isPropertyId","title","namespace","isEntityNamespace","isItemId","entityNamespaces","includes","isNonNestedEntityId","getNumericId","Error","wikibaseTimeToDateObject","bestEffort","fn","err","toEpochTime","getTime","toISOString","toSimpleDay","precision","wikibaseTimeToEpochTime","wikibaseTimeToISOString","wikibaseTimeToSimpleDay","getImageUrl","filename","width","url","getEntityIdFromGuid","parts","toUpperCase","join","simple","datavalue","monolingualtext","options","keepRichValues","text","entity","prefixedId","entityPrefix","entityLetter","item","lexeme","property","prefix","quantity","amount","parseFloat","richValue","unit","upperBound","lowerBound","coordinate","latitude","longitude","timeValue","timeConverter","getTimeConverter","timezone","before","after","calendarmodel","key","converter","timeConverters","JSON","stringify","substring","iso","epoch","none","parsers","commonsMedia","math","string","parse","datatype","claimId","type","message","truthyPropertyClaims","propClaims","aggregate","reduce","aggregatePerRank","preferred","normal","nonDeprecatedPropertyClaims","filter","claim","rank","push","truthyClaims","claims","truthClaimsOnly","parseClaim","simplifyClaims","propertyPrefix","parseOptions","simpleClaims","simplifyPropertyClaims","keepNonTruthy","keepNonDeprecated","areSubSnaks","simplifyClaim","defined","undefined","snaktype","isQualifierSnak","isReferenceSnak","keepQualifiers","keepReferences","keepIds","keepHashes","keepTypes","keepSnaktypes","keepRanks","parseKeepOptions","mainsnak","somevalueValue","novalueValue","valueObj","subSnaksOptions","getSubSnakOptions","qualifiers","simplifyQualifiers","references","simplifyReferences","simplifyPropertyQualifiers","propertyQualifiers","refRecord","simplifyReferenceRecord","snaks","assign","keepOptions","keepAll","optionName","simplifyQualifier","isFormId","simplifyRepresentations","simplifyForm","form","grammaticalFeatures","simplifyForms","forms","isSenseId","simplifyGlosses","simplifySense","sense","simplifySenses","senses","wikidataBase","languages","getSitelinkUrl","site","shortSiteKey","specialUrlBuilder","siteUrlBuilders","project","getSitelinkData","wikimediaSite","subdomain","commons","mediawiki","meta","species","wikidata","wikimania","sitelinkUrlPattern","startsWith","matchData","match","decodeURIComponent","specialProjectName","specialSites","projectSuffix","indexOf","projectsBySuffix","commonswiki","mediawikiwiki","metawiki","specieswiki","wikidatawiki","wikimaniawiki","isSitelinkKey","i","isource","iquote","tionary","ibooks","iversity","ivoyage","inews","sitelinks","addUrl","aggregateValues","index","input","vars","head","results","bindings","minimize","varName","result","parseValue","richVars","associatedVars","standaloneVars","identifyVars","getSimplifiedResult","parser","getDatatypesParsers","uri","parseUri","bnode","numberParser","datatypesParsers","passValue","decimal","integer","float","double","boolean","convertStatementUriToGuid","some","isAssociatedVar","associatedVarPattern","RegExp","varNameA","pattern","bind","simplifiedResult","richVarData","associatedVarName","addAssociatedValue","shortAssociatedVarName","specialNames","associatedVarData","altLabel","propertyClaims","qualifier","sparqlResults","snak","propertySnaks","simplify","simplifyEntity","modified","simplifyIfDefined","lexicalCategory","attribute","simplifyEntities","entities","wb","res","body","pagesTitles","query","search","wd","hasOwnProperty","prop","prototype","call","qs","sep","eq","regexp","maxKeys","len","x","kstr","vstr","k","v","idx","substr","isArray","xs","stringifyPrimitive","isFinite","name","objectKeys","ks","f","decode","encode","stringifyQuery","isBrowser","location","document","queryObj","URLSearchParams","instanceApiEndpoint","origin","types","buildUrl","limit","format","uselang","offset","params","continue","action","namespacePattern","haswbstatement","profile","sort","srsearch","statements","statement","list","trim","srnamespace","srlimit","sroffset","srqiprofile","srsort","validate","testName","entityPageTitle","revisionId","ids","props","redirects","console","warn","getEntities","getIdsGroups","idsGroup","groups","group","uniqueId","titles","rvlimit","start","rvstart","getEpochSeconds","end","rvend","user","excludeuser","tag","rvprop","rvuser","rvexcludeuser","rvtag","earliestPointInMs","Math","trunc","instance","wgScriptPath","revision","sites","parseSite","normalize","sparqlEndpoint","sparql","itemsOnly","sparqlQuery","caseInsensitive","keepProperties","valueFn","caseInsensitiveValueQuery","directValueQuery","properties","prefixifyProperty","valueBlock","getValueBlock","getValueString","valStr","sitelinksHelpers","rankHelpers","tip","common","WBK","config","wikibaseApiFunctions","instanceRoot","wikibaseQueryServiceFunctions","validateEndpoint","searchEntities","cirrusSearchPages","getManyEntities","getRevisions","getEntityRevision","getEntitiesFromSitelinks","missingInstance","getReverseClaims","missingSparqlEndpoint","parsedData","root","apiEndpoint","missingConfig","missingParameter","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen"],"mappings":"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","file":"test.836cc593.js","sourceRoot":"..","sourcesContent":["module.exports = {\n  // Ex: keep only 'fr' in 'fr_FR'\n  shortLang: language => language.toLowerCase().split('_')[0],\n\n  // a polymorphism helper:\n  // accept either a string or an array and return an array\n  forceArray: array => {\n    if (typeof array === 'string') array = [ array ]\n    return array || []\n  },\n\n  // simplistic implementation to filter-out arrays\n  isPlainObject: obj => {\n    if (!obj || typeof obj !== 'object' || obj instanceof Array) return false\n    return true\n  },\n\n  // encodeURIComponent ignores !, ', (, ), and *\n  // cf https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent#Description\n  fixedEncodeURIComponent: str => {\n    return encodeURIComponent(str).replace(/[!'()*]/g, encodeCharacter)\n  },\n\n  replaceSpaceByUnderscores: str => str.replace(/\\s/g, '_'),\n\n  uniq: array => Array.from(new Set(array))\n}\n\nconst encodeCharacter = char => '%' + char.charCodeAt(0).toString(16)\n","const simplifyTextAttributes = multivalue => data => {\n  const simplified = {}\n  Object.keys(data).forEach(lang => {\n    const obj = data[lang]\n    if (obj != null) {\n      simplified[lang] = multivalue ? obj.map(getValue) : obj.value\n    } else {\n      simplified[lang] = multivalue ? [] : null\n    }\n  })\n  return simplified\n}\n\nconst getValue = obj => obj.value\n\nconst singleValue = simplifyTextAttributes(false)\n\nmodule.exports = {\n  labels: singleValue,\n  descriptions: singleValue,\n  aliases: simplifyTextAttributes(true),\n  lemmas: singleValue,\n  representations: singleValue,\n  glosses: singleValue\n}\n","module.exports = wikibaseTime => {\n  // Also accept claim datavalue.value objects\n  if (typeof wikibaseTime === 'object') {\n    wikibaseTime = wikibaseTime.time\n  }\n\n  const sign = wikibaseTime[0]\n  let [ yearMonthDay, withinDay ] = wikibaseTime.slice(1).split('T')\n\n  // Wikidata generates invalid ISO dates to indicate precision\n  // ex: +1990-00-00T00:00:00Z to indicate 1990 with year precision\n  yearMonthDay = yearMonthDay.replace(/-00/g, '-01')\n  const rest = `${yearMonthDay}T${withinDay}`\n\n  return fullDateData(sign, rest)\n}\n\nconst fullDateData = (sign, rest) => {\n  const year = rest.split('-')[0]\n  const needsExpandedYear = sign === '-' || year.length > 4\n\n  return needsExpandedYear ? expandedYearDate(sign, rest, year) : new Date(rest)\n}\n\nconst expandedYearDate = (sign, rest, year) => {\n  let date\n  // Using ISO8601 expanded notation for negative years or positive\n  // years with more than 4 digits: adding up to 2 leading zeros\n  // when needed. Can't find the documentation again, but testing\n  // with `new Date(date)` gives a good clue of the implementation\n  if (year.length === 4) {\n    date = `${sign}00${rest}`\n  } else if (year.length === 5) {\n    date = `${sign}0${rest}`\n  } else {\n    date = sign + rest\n  }\n  return new Date(date)\n}\n","const toDateObject = require('./wikibase_time_to_date_object')\n\nconst helpers = {}\nhelpers.isNumericId = id => /^[1-9][0-9]*$/.test(id)\nhelpers.isEntityId = id => /^((Q|P|L)[1-9][0-9]*|L[1-9][0-9]*-(F|S)[1-9][0-9]*)$/.test(id)\nhelpers.isEntitySchemaId = id => /^E[1-9][0-9]*$/.test(id)\nhelpers.isItemId = id => /^Q[1-9][0-9]*$/.test(id)\nhelpers.isPropertyId = id => /^P[1-9][0-9]*$/.test(id)\nhelpers.isLexemeId = id => /^L[1-9][0-9]*$/.test(id)\nhelpers.isFormId = id => /^L[1-9][0-9]*-F[1-9][0-9]*$/.test(id)\nhelpers.isSenseId = id => /^L[1-9][0-9]*-S[1-9][0-9]*$/.test(id)\nhelpers.isGuid = guid => /^((Q|P|L)[1-9][0-9]*|L[1-9][0-9]*-(F|S)[1-9][0-9]*)\\$[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(guid)\nhelpers.isHash = hash => /^[0-9a-f]{40}$/.test(hash)\nhelpers.isPropertyClaimsId = id => {\n  const [ entityId, propertyId ] = id.split('#')\n  return helpers.isEntityId(entityId) && helpers.isPropertyId(propertyId)\n}\nhelpers.isRevisionId = id => /^\\d+$/.test(id)\n\nhelpers.isEntityPageTitle = title => {\n  if (typeof title !== 'string') return false\n  let [ namespace, id ] = title.split(':')\n  if (namespace && id) {\n    return isEntityNamespace(namespace) && helpers[`is${namespace}Id`](id)\n  } else {\n    id = namespace\n    return helpers.isItemId(id)\n  }\n}\n\nconst entityNamespaces = [ 'Item', 'Property', 'Lexeme' ]\n\nconst isEntityNamespace = str => entityNamespaces.includes(str)\n\nconst isNonNestedEntityId = id => /^(Q|P|L)[1-9][0-9]*$/.test(id)\n\nhelpers.getNumericId = id => {\n  if (!isNonNestedEntityId(id)) throw new Error(`invalid entity id: ${id}`)\n  return id.replace(/^(Q|P|L)/, '')\n}\n\nhelpers.wikibaseTimeToDateObject = toDateObject\n\n// Try to parse the date or return the input\nconst bestEffort = fn => value => {\n  try {\n    return fn(value)\n  } catch (err) {\n    value = value.time || value\n\n    const sign = value[0]\n    let [ yearMonthDay, withinDay ] = value.slice(1).split('T')\n    yearMonthDay = yearMonthDay.replace(/-00/g, '-01')\n\n    return `${sign}${yearMonthDay}T${withinDay}`\n  }\n}\n\nconst toEpochTime = wikibaseTime => toDateObject(wikibaseTime).getTime()\nconst toISOString = wikibaseTime => toDateObject(wikibaseTime).toISOString()\n\n// A date format that knows just three precisions:\n// 'yyyy', 'yyyy-mm', and 'yyyy-mm-dd' (including negative and non-4 digit years)\n// Should be able to handle the old and the new Wikidata time:\n// - in the old one, units below the precision where set to 00\n// - in the new one, those months and days are set to 01 in those cases,\n//   so when we can access the full claim object, we check the precision\n//   to recover the old format\nconst toSimpleDay = wikibaseTime => {\n  // Also accept claim datavalue.value objects, and actually prefer those,\n  // as we can check the precision\n  if (typeof wikibaseTime === 'object') {\n    const { time, precision } = wikibaseTime\n    // Year precision\n    if (precision === 9) wikibaseTime = time.replace('-01-01T', '-00-00T')\n    // Month precision\n    else if (precision === 10) wikibaseTime = time.replace('-01T', '-00T')\n    else wikibaseTime = time\n  }\n\n  return wikibaseTime.split('T')[0]\n  // Remove positive years sign\n  .replace(/^\\+/, '')\n  // Remove years padding zeros\n  .replace(/^(-?)0+/, '$1')\n  // Remove days if not included in the Wikidata date precision\n  .replace(/-00$/, '')\n  // Remove months if not included in the Wikidata date precision\n  .replace(/-00$/, '')\n}\n\nhelpers.wikibaseTimeToEpochTime = bestEffort(toEpochTime)\nhelpers.wikibaseTimeToISOString = bestEffort(toISOString)\nhelpers.wikibaseTimeToSimpleDay = bestEffort(toSimpleDay)\n\nhelpers.getImageUrl = (filename, width) => {\n  let url = `https://commons.wikimedia.org/wiki/Special:FilePath/${filename}`\n  if (typeof width === 'number') url += `?width=${width}`\n  return url\n}\n\nhelpers.getEntityIdFromGuid = guid => {\n  const parts = guid.split(/[$-]/)\n  if (parts.length === 6) {\n    // Examples:\n    // - q520$BCA8D9DE-B467-473B-943C-6FD0C5B3D02C\n    // - P6216-a7fd6230-496e-6b47-ca4a-dcec5dbd7f95\n    return parts[0].toUpperCase()\n  } else if (parts.length === 7) {\n    // Examples:\n    // - L525-S1$66D20252-8CEC-4DB1-8B00-D713CFF42E48\n    // - L525-F2-52c9b382-02f5-4413-9923-26ade74f5a0d\n    return parts.slice(0, 2).join('-').toUpperCase()\n  } else {\n    throw new Error(`invalid guid: ${guid}`)\n  }\n}\n\nmodule.exports = helpers\n","const { wikibaseTimeToISOString, wikibaseTimeToEpochTime, wikibaseTimeToSimpleDay } = require('./helpers')\n\nconst simple = datavalue => datavalue.value\n\nconst monolingualtext = (datavalue, options) => {\n  return options.keepRichValues ? datavalue.value : datavalue.value.text\n}\n\nconst entity = (datavalue, options) => prefixedId(datavalue, options.entityPrefix)\n\nconst entityLetter = {\n  item: 'Q',\n  lexeme: 'L',\n  property: 'P'\n}\n\nconst prefixedId = (datavalue, prefix) => {\n  const { value } = datavalue\n  const id = value.id || entityLetter[value['entity-type']] + value['numeric-id']\n  return typeof prefix === 'string' ? `${prefix}:${id}` : id\n}\n\nconst quantity = (datavalue, options) => {\n  const { value } = datavalue\n  const amount = parseFloat(value.amount)\n  if (options.keepRichValues) {\n    const richValue = {\n      amount: parseFloat(value.amount),\n      // ex: http://www.wikidata.org/entity/\n      unit: value.unit.replace(/^https?:\\/\\/.*\\/entity\\//, '')\n    }\n    if (value.upperBound != null) richValue.upperBound = parseFloat(value.upperBound)\n    if (value.lowerBound != null) richValue.lowerBound = parseFloat(value.lowerBound)\n    return richValue\n  } else {\n    return amount\n  }\n}\n\nconst coordinate = (datavalue, options) => {\n  if (options.keepRichValues) {\n    return datavalue.value\n  } else {\n    return [ datavalue.value.latitude, datavalue.value.longitude ]\n  }\n}\n\nconst time = (datavalue, options) => {\n  let timeValue\n  if (typeof options.timeConverter === 'function') {\n    timeValue = options.timeConverter(datavalue.value)\n  } else {\n    timeValue = getTimeConverter(options.timeConverter)(datavalue.value)\n  }\n  if (options.keepRichValues) {\n    const { timezone, before, after, precision, calendarmodel } = datavalue.value\n    return { time: timeValue, timezone, before, after, precision, calendarmodel }\n  } else {\n    return timeValue\n  }\n}\n\nconst getTimeConverter = (key = 'iso') => {\n  const converter = timeConverters[key]\n  if (!converter) throw new Error(`invalid converter key: ${JSON.stringify(key).substring(0, 100)}`)\n  return converter\n}\n\n// Each time converter should be able to accept 2 keys of arguments:\n// - either datavalue.value objects (prefered as it gives access to the precision)\n// - or the time string (datavalue.value.time)\nconst timeConverters = {\n  iso: wikibaseTimeToISOString,\n  epoch: wikibaseTimeToEpochTime,\n  'simple-day': wikibaseTimeToSimpleDay,\n  none: wikibaseTime => wikibaseTime.time || wikibaseTime\n}\n\nconst parsers = {\n  commonsMedia: simple,\n  'external-id': simple,\n  'geo-shape': simple,\n  'globe-coordinate': coordinate,\n  math: simple,\n  monolingualtext,\n  'musical-notation': simple,\n  quantity,\n  string: simple,\n  'tabular-data': simple,\n  time,\n  url: simple,\n  'wikibase-entityid': entity,\n  'wikibase-form': entity,\n  'wikibase-item': entity,\n  'wikibase-lexeme': entity,\n  'wikibase-property': entity,\n  'wikibase-sense': entity\n}\n\nmodule.exports = {\n  parsers,\n  parse: (datatype, datavalue, options, claimId) => {\n    // Known case of missing datatype: form.claims, sense.claims\n    datatype = datatype || datavalue.type\n    // Known case requiring this: legacy \"muscial notation\" datatype\n    datatype = datatype.replace(' ', '-')\n\n    try {\n      return parsers[datatype](datavalue, options)\n    } catch (err) {\n      if (err.message === 'parsers[datatype] is not a function') {\n        err.message = `${datatype} claim parser isn't implemented\n        Claim id: ${claimId}\n        Please report to https://github.com/maxlath/wikibase-sdk/issues`\n      }\n      throw err\n    }\n  }\n}\n","const truthyPropertyClaims = propClaims => {\n  const aggregate = propClaims.reduce(aggregatePerRank, {})\n  // on truthyness: https://www.mediawiki.org/wiki/Wikibase/Indexing/RDF_Dump_Format#Truthy_statements\n  return aggregate.preferred || aggregate.normal || []\n}\n\nconst nonDeprecatedPropertyClaims = propClaims => {\n  return propClaims.filter(claim => claim.rank !== 'deprecated')\n}\n\nconst aggregatePerRank = (aggregate, claim) => {\n  const { rank } = claim\n  aggregate[rank] || (aggregate[rank] = [])\n  aggregate[rank].push(claim)\n  return aggregate\n}\n\nconst truthyClaims = claims => {\n  const truthClaimsOnly = {}\n  Object.keys(claims).forEach(property => {\n    truthClaimsOnly[property] = truthyPropertyClaims(claims[property])\n  })\n  return truthClaimsOnly\n}\n\nmodule.exports = { truthyClaims, truthyPropertyClaims, nonDeprecatedPropertyClaims }\n","const { parse: parseClaim } = require('./parse_claim')\nconst { uniq } = require('../utils/utils')\nconst { truthyPropertyClaims, nonDeprecatedPropertyClaims } = require('./rank')\n\n// Expects an entity 'claims' object\n// Ex: entity.claims\nconst simplifyClaims = (claims, ...options) => {\n  const { propertyPrefix } = parseOptions(options)\n  const simpleClaims = {}\n  for (let id in claims) {\n    const propClaims = claims[id]\n    if (propertyPrefix) {\n      id = propertyPrefix + ':' + id\n    }\n    simpleClaims[id] = simplifyPropertyClaims(propClaims, ...options)\n  }\n  return simpleClaims\n}\n\n// Expects the 'claims' array of a particular property\n// Ex: entity.claims.P369\nconst simplifyPropertyClaims = (propClaims, ...options) => {\n  // Avoid to throw on empty inputs to allow to simplify claims array\n  // without having to know if the entity as claims for this property\n  // Ex: simplifyPropertyClaims(entity.claims.P124211616)\n  if (propClaims == null || propClaims.length === 0) return []\n\n  const { keepNonTruthy, keepNonDeprecated, areSubSnaks } = parseOptions(options)\n\n  if (keepNonDeprecated) {\n    propClaims = nonDeprecatedPropertyClaims(propClaims)\n  } else if (!(keepNonTruthy || areSubSnaks)) {\n    propClaims = truthyPropertyClaims(propClaims)\n  }\n\n  propClaims = propClaims\n    .map(claim => simplifyClaim(claim, ...options))\n    // Filter-out novalue and somevalue claims,\n    // unless a novalueValue or a somevalueValue is passed in options\n    .filter(defined)\n\n  // Deduplicate values unless we return a rich value object\n  if (propClaims[0] && typeof propClaims[0] !== 'object') {\n    return uniq(propClaims)\n  } else {\n    return propClaims\n  }\n}\n\n// Considers null as defined\nconst defined = obj => obj !== undefined\n\n// Expects a single claim object\n// Ex: entity.claims.P369[0]\nconst simplifyClaim = (claim, ...options) => {\n  options = parseOptions(options)\n  const { keepQualifiers, keepReferences, keepIds, keepHashes, keepTypes, keepSnaktypes, keepRanks } = parseKeepOptions(options)\n\n  // tries to replace wikidata deep claim object by a simple value\n  // e.g. a string, an entity Qid or an epoch time number\n  const { mainsnak, rank } = claim\n\n  let value, datatype, datavalue, snaktype, isQualifierSnak, isReferenceSnak\n  if (mainsnak) {\n    datatype = mainsnak.datatype\n    datavalue = mainsnak.datavalue\n    snaktype = mainsnak.snaktype\n  } else {\n    // Qualifiers have no mainsnak, and define datatype, datavalue on claim\n    datavalue = claim.datavalue\n    datatype = claim.datatype\n    snaktype = claim.snaktype\n    // Duck typing the sub-snak type\n    if (claim.hash) isQualifierSnak = true\n    else isReferenceSnak = true\n  }\n\n  if (datavalue) {\n    value = parseClaim(datatype, datavalue, options, claim.id)\n  } else {\n    if (snaktype === 'somevalue') value = options.somevalueValue\n    else if (snaktype === 'novalue') value = options.novalueValue\n    else throw new Error('no datavalue or special snaktype found')\n  }\n\n  // Qualifiers should not attempt to keep sub-qualifiers or references\n  if (isQualifierSnak) {\n    if (!(keepHashes || keepTypes || keepSnaktypes)) return value\n\n    const valueObj = { value }\n\n    if (keepHashes) valueObj.hash = claim.hash\n    if (keepTypes) valueObj.type = datatype\n    if (keepSnaktypes) valueObj.snaktype = snaktype\n\n    return valueObj\n  }\n  if (isReferenceSnak) {\n    if (!keepTypes) return value\n\n    return { type: datatype, value }\n  }\n  // No need to test keepHashes as it has no effect if neither\n  // keepQualifiers or keepReferences is true\n  if (!(keepQualifiers || keepReferences || keepIds || keepTypes || keepSnaktypes || keepRanks)) {\n    return value\n  }\n\n  // When keeping qualifiers or references, the value becomes an object\n  // instead of a direct value\n  const valueObj = { value }\n\n  if (keepTypes) valueObj.type = datatype\n\n  if (keepSnaktypes) valueObj.snaktype = snaktype\n\n  if (keepRanks) valueObj.rank = rank\n\n  const subSnaksOptions = getSubSnakOptions(options)\n  subSnaksOptions.keepHashes = keepHashes\n\n  if (keepQualifiers) {\n    valueObj.qualifiers = simplifyQualifiers(claim.qualifiers, subSnaksOptions)\n  }\n\n  if (keepReferences) {\n    claim.references = claim.references || []\n    valueObj.references = simplifyReferences(claim.references, subSnaksOptions)\n  }\n\n  if (keepIds) valueObj.id = claim.id\n\n  return valueObj\n}\n\nconst parseOptions = options => {\n  if (options == null) return {}\n\n  if (options[0] && typeof options[0] === 'object') return options[0]\n\n  // Legacy interface\n  const [ entityPrefix, propertyPrefix, keepQualifiers ] = options\n  return { entityPrefix, propertyPrefix, keepQualifiers }\n}\n\nconst simplifyQualifiers = (qualifiers, options) => {\n  return simplifyClaims(qualifiers, getSubSnakOptions(options))\n}\n\nconst simplifyPropertyQualifiers = (propertyQualifiers, options) => {\n  return simplifyPropertyClaims(propertyQualifiers, getSubSnakOptions(options))\n}\n\nconst simplifyReferences = (references, options) => {\n  return references.map(refRecord => {\n    return simplifyReferenceRecord(refRecord, options)\n  })\n}\n\nconst simplifyReferenceRecord = (refRecord, options) => {\n  const subSnaksOptions = getSubSnakOptions(options)\n  const snaks = simplifyClaims(refRecord.snaks, subSnaksOptions)\n  if (subSnaksOptions.keepHashes) return { snaks, hash: refRecord.hash }\n  else return snaks\n}\n\nconst getSubSnakOptions = (options = {}) => {\n  if (options.areSubSnaks) return options\n  // Using a new object so that the original options object isn't modified\n  else return Object.assign({}, options, { areSubSnaks: true })\n}\n\nconst keepOptions = [ 'keepQualifiers', 'keepReferences', 'keepIds', 'keepHashes', 'keepTypes', 'keepSnaktypes', 'keepRanks', 'keepRichValues' ]\n\nconst parseKeepOptions = options => {\n  if (options.keepAll) {\n    keepOptions.forEach(optionName => {\n      if (options[optionName] == null) options[optionName] = true\n    })\n  }\n  return options\n}\n\nmodule.exports = {\n  simplifyClaims,\n  simplifyPropertyClaims,\n  simplifyClaim,\n  simplifyQualifiers,\n  simplifyPropertyQualifiers,\n  simplifyQualifier: simplifyClaim,\n  simplifyReferences,\n}\n","const { isFormId } = require('./helpers')\nconst { representations: simplifyRepresentations } = require('./simplify_text_attributes')\nconst { simplifyClaims } = require('./simplify_claims')\n\nconst simplifyForm = (form, options) => {\n  const { id, representations, grammaticalFeatures, claims } = form\n  if (!isFormId(id)) throw new Error('invalid form object')\n  return {\n    id,\n    representations: simplifyRepresentations(representations),\n    grammaticalFeatures,\n    claims: simplifyClaims(claims, options)\n  }\n}\n\nconst simplifyForms = (forms, options) => forms.map(form => simplifyForm(form, options))\n\nmodule.exports = { simplifyForm, simplifyForms }\n","const { isSenseId } = require('./helpers')\nconst { glosses: simplifyGlosses } = require('./simplify_text_attributes')\nconst { simplifyClaims } = require('./simplify_claims')\n\nconst simplifySense = (sense, options) => {\n  const { id, glosses, claims } = sense\n  if (!isSenseId(id)) throw new Error('invalid sense object')\n  return {\n    id,\n    glosses: simplifyGlosses(glosses),\n    claims: simplifyClaims(claims, options)\n  }\n}\n\nconst simplifySenses = (senses, options) => senses.map(sense => simplifySense(sense, options))\n\nmodule.exports = { simplifySense, simplifySenses }\n","// Generated by 'npm run update-sitelinks-languages'\nmodule.exports = [\n  'aa',\n  'ab',\n  'ace',\n  'ady',\n  'af',\n  'ak',\n  'als',\n  'alt',\n  'am',\n  'ang',\n  'an',\n  'arc',\n  'ar',\n  'ary',\n  'arz',\n  'ast',\n  'as',\n  'atj',\n  'avk',\n  'av',\n  'awa',\n  'ay',\n  'azb',\n  'az',\n  'ban',\n  'bar',\n  'bat_smg',\n  'ba',\n  'bcl',\n  'be_x_old',\n  'be',\n  'bg',\n  'bh',\n  'bi',\n  'bjn',\n  'bm',\n  'bn',\n  'bo',\n  'bpy',\n  'br',\n  'bs',\n  'bug',\n  'bxr',\n  'ca',\n  'cbk_zam',\n  'cdo',\n  'ceb',\n  'ce',\n  'cho',\n  'chr',\n  'ch',\n  'chy',\n  'ckb',\n  'co',\n  'crh',\n  'cr',\n  'csb',\n  'cs',\n  'cu',\n  'cv',\n  'cy',\n  'dag',\n  'da',\n  'de',\n  'din',\n  'diq',\n  'dsb',\n  'dty',\n  'dv',\n  'dz',\n  'ee',\n  'el',\n  'eml',\n  'en',\n  'eo',\n  'es',\n  'et',\n  'eu',\n  'ext',\n  'fa',\n  'ff',\n  'fiu_vro',\n  'fi',\n  'fj',\n  'fo',\n  'frp',\n  'frr',\n  'fr',\n  'fur',\n  'fy',\n  'gag',\n  'gan',\n  'ga',\n  'gcr',\n  'gd',\n  'glk',\n  'gl',\n  'gn',\n  'gom',\n  'gor',\n  'got',\n  'gu',\n  'gv',\n  'hak',\n  'ha',\n  'haw',\n  'he',\n  'hif',\n  'hi',\n  'ho',\n  'hr',\n  'hsb',\n  'ht',\n  'hu',\n  'hy',\n  'hyw',\n  'hz',\n  'ia',\n  'id',\n  'ie',\n  'ig',\n  'ii',\n  'ik',\n  'ilo',\n  'inh',\n  'io',\n  'is',\n  'it',\n  'iu',\n  'jam',\n  'ja',\n  'jbo',\n  'jv',\n  'kaa',\n  'kab',\n  'ka',\n  'kbd',\n  'kbp',\n  'kg',\n  'ki',\n  'kj',\n  'kk',\n  'kl',\n  'km',\n  'kn',\n  'koi',\n  'ko',\n  'krc',\n  'kr',\n  'ksh',\n  'ks',\n  'ku',\n  'kv',\n  'kw',\n  'ky',\n  'lad',\n  'la',\n  'lbe',\n  'lb',\n  'lez',\n  'lfn',\n  'lg',\n  'lij',\n  'li',\n  'lld',\n  'lmo',\n  'ln',\n  'lo',\n  'lrc',\n  'ltg',\n  'lt',\n  'lv',\n  'mad',\n  'mai',\n  'map_bms',\n  'mdf',\n  'mg',\n  'mhr',\n  'mh',\n  'min',\n  'mi',\n  'mk',\n  'ml',\n  'mni',\n  'mn',\n  'mnw',\n  'mo',\n  'mrj',\n  'mr',\n  'ms',\n  'mt',\n  'mus',\n  'mwl',\n  'myv',\n  'my',\n  'mzn',\n  'nah',\n  'nap',\n  'na',\n  'nds_nl',\n  'nds',\n  'ne',\n  'new',\n  'ng',\n  'nia',\n  'nl',\n  'nn',\n  'nov',\n  'no',\n  'nqo',\n  'nrm',\n  'nso',\n  'nv',\n  'ny',\n  'oc',\n  'olo',\n  'om',\n  'or',\n  'os',\n  'pag',\n  'pam',\n  'pap',\n  'pa',\n  'pcd',\n  'pdc',\n  'pfl',\n  'pih',\n  'pi',\n  'pl',\n  'pms',\n  'pnb',\n  'pnt',\n  'ps',\n  'pt',\n  'qu',\n  'rm',\n  'rmy',\n  'rn',\n  'roa_rup',\n  'roa_tara',\n  'ro',\n  'rue',\n  'ru',\n  'rw',\n  'sah',\n  'sat',\n  'sa',\n  'scn',\n  'sco',\n  'sc',\n  'sd',\n  'se',\n  'sg',\n  'shi',\n  'shn',\n  'sh',\n  'shy',\n  'simple',\n  'si',\n  'skr',\n  'sk',\n  'sl',\n  'smn',\n  'sm',\n  'sn',\n  'sources',\n  'so',\n  'sq',\n  'srn',\n  'sr',\n  'ss',\n  'stq',\n  'st',\n  'su',\n  'sv',\n  'sw',\n  'szl',\n  'szy',\n  'ta',\n  'tay',\n  'tcy',\n  'tet',\n  'te',\n  'tg',\n  'th',\n  'ti',\n  'tk',\n  'tl',\n  'tn',\n  'to',\n  'tpi',\n  'trv',\n  'tr',\n  'ts',\n  'tt',\n  'tum',\n  'tw',\n  'tyv',\n  'ty',\n  'udm',\n  'ug',\n  'uk',\n  'ur',\n  'uz',\n  'vec',\n  'vep',\n  've',\n  'vi',\n  'vls',\n  'vo',\n  'war',\n  'wa',\n  'wo',\n  'wuu',\n  'xal',\n  'xh',\n  'xmf',\n  'yi',\n  'yo',\n  'yue',\n  'za',\n  'zea',\n  'zh_classical',\n  'zh_min_nan',\n  'zh_yue',\n  'zh',\n  'zu'\n]\n","const { fixedEncodeURIComponent, replaceSpaceByUnderscores, isPlainObject } = require('../utils/utils')\nconst { isPropertyId } = require('./helpers')\nconst wikidataBase = 'https://www.wikidata.org/wiki/'\nconst languages = require('./sitelinks_languages')\n\nconst getSitelinkUrl = (site, title) => {\n  if (isPlainObject(site)) {\n    title = site.title\n    site = site.site\n  }\n\n  if (!site) throw new Error('missing a site')\n  if (!title) throw new Error('missing a title')\n\n  const shortSiteKey = site.replace(/wiki$/, '')\n  const specialUrlBuilder = siteUrlBuilders[shortSiteKey] || siteUrlBuilders[site]\n  if (specialUrlBuilder) return specialUrlBuilder(title)\n\n  const { lang, project } = getSitelinkData(site)\n  title = fixedEncodeURIComponent(replaceSpaceByUnderscores(title))\n  return `https://${lang}.${project}.org/wiki/${title}`\n}\n\nconst wikimediaSite = subdomain => title => `https://${subdomain}.wikimedia.org/wiki/${title}`\n\nconst siteUrlBuilders = {\n  commons: wikimediaSite('commons'),\n  mediawiki: title => `https://www.mediawiki.org/wiki/${title}`,\n  meta: wikimediaSite('meta'),\n  species: wikimediaSite('species'),\n  wikidata: title => {\n    if (isPropertyId(title)) return `${wikidataBase}Property:${title}`\n    return `${wikidataBase}${title}`\n  },\n  wikimania: wikimediaSite('wikimania')\n}\n\nconst sitelinkUrlPattern = /^https?:\\/\\/([\\w-]{2,10})\\.(\\w+)\\.org\\/\\w+\\/(.*)/\n\nconst getSitelinkData = site => {\n  if (site.startsWith('http')) {\n    const url = site\n    const matchData = url.match(sitelinkUrlPattern)\n    if (!matchData) throw new Error(`invalid sitelink url: ${url}`)\n    let [ lang, project, title ] = matchData.slice(1)\n    title = decodeURIComponent(title)\n    let key\n    // Known case: wikidata, mediawiki\n    if (lang === 'www') {\n      lang = 'en'\n      key = project\n    } else if (lang === 'commons') {\n      lang = 'en'\n      project = key = 'commons'\n    } else {\n      key = `${lang}${project}`.replace('wikipedia', 'wiki')\n    }\n    return { lang, project, key, title, url }\n  } else {\n    const key = site\n    const specialProjectName = specialSites[key]\n    if (specialProjectName) return { lang: 'en', project: specialProjectName, key }\n\n    const [ lang, projectSuffix, rest ] = key.split('wik')\n\n    // Detecting cases like 'frwikiwiki' that would return [ 'fr', 'i', 'i' ]\n    if (rest != null) throw new Error(`invalid sitelink key: ${key}`)\n\n    if (languages.indexOf(lang) === -1) {\n      throw new Error(`sitelink lang not found: ${lang}`)\n    }\n\n    const project = projectsBySuffix[projectSuffix]\n    if (!project) throw new Error(`sitelink project not found: ${project}`)\n\n    return { lang, project, key }\n  }\n}\n\nconst specialSites = {\n  commonswiki: 'commons',\n  mediawikiwiki: 'mediawiki',\n  metawiki: 'meta',\n  specieswiki: 'specieswiki',\n  wikidatawiki: 'wikidata',\n  wikimaniawiki: 'wikimania'\n}\n\nconst isSitelinkKey = site => {\n  try {\n    // relies on getSitelinkData validation\n    getSitelinkData(site)\n    return true\n  } catch (err) {\n    return false\n  }\n}\n\nconst projectsBySuffix = {\n  i: 'wikipedia',\n  isource: 'wikisource',\n  iquote: 'wikiquote',\n  tionary: 'wiktionary',\n  ibooks: 'wikibooks',\n  iversity: 'wikiversity',\n  ivoyage: 'wikivoyage',\n  inews: 'wikinews'\n}\n\nmodule.exports = { getSitelinkUrl, getSitelinkData, isSitelinkKey }\n","const { getSitelinkUrl } = require('./sitelinks')\n\nmodule.exports = (sitelinks, options = {}) => {\n  const { addUrl } = options\n  return Object.keys(sitelinks).reduce(aggregateValues(sitelinks, addUrl), {})\n}\n\nconst aggregateValues = (sitelinks, addUrl) => (index, key) => {\n  const { title } = sitelinks[key]\n  if (addUrl) {\n    index[key] = { title, url: getSitelinkUrl(key, title) }\n  } else {\n    index[key] = title\n  }\n  return index\n}\n","module.exports = (input, options = {}) => {\n  if (typeof input === 'string') input = JSON.parse(input)\n\n  const { vars } = input.head\n  const results = input.results.bindings\n\n  if (vars.length === 1 && options.minimize === true) {\n    const varName = vars[0]\n    return results\n    .map(result => parseValue(result[varName]))\n    // filtering-out bnodes\n    .filter(result => result != null)\n  }\n\n  const { richVars, associatedVars, standaloneVars } = identifyVars(vars)\n  return results.map(getSimplifiedResult(richVars, associatedVars, standaloneVars))\n}\n\nconst parseValue = valueObj => {\n  if (!(valueObj)) return\n  let { datatype } = valueObj\n  datatype = datatype && datatype.replace('http://www.w3.org/2001/XMLSchema#', '')\n  const parser = parsers[valueObj.type] || getDatatypesParsers(datatype)\n  return parser(valueObj)\n}\n\nconst parsers = {\n  uri: valueObj => parseUri(valueObj.value),\n  // blank nodes will be filtered-out in order to get things simple\n  bnode: () => null\n}\n\nconst numberParser = valueObj => parseFloat(valueObj.value)\n\nconst getDatatypesParsers = datatype => {\n  datatype = datatype && datatype.replace('http://www.w3.org/2001/XMLSchema#', '')\n  return datatypesParsers[datatype] || passValue\n}\n\nconst datatypesParsers = {\n  decimal: numberParser,\n  integer: numberParser,\n  float: numberParser,\n  double: numberParser,\n  boolean: valueObj => valueObj.value === 'true'\n}\n\n// return the raw value if the datatype is missing\nconst passValue = valueObj => valueObj.value\n\nconst parseUri = uri => {\n  // ex: http://www.wikidata.org/entity/statement/\n  if (uri.match(/http.*\\/entity\\/statement\\//)) {\n    return convertStatementUriToGuid(uri)\n  }\n\n  return uri\n  // ex: http://www.wikidata.org/entity/\n  .replace(/^https?:\\/\\/.*\\/entity\\//, '')\n  // ex: http://www.wikidata.org/prop/direct/\n  .replace(/^https?:\\/\\/.*\\/prop\\/direct\\//, '')\n}\n\nconst convertStatementUriToGuid = uri => {\n  // ex: http://www.wikidata.org/entity/statement/\n  uri = uri.replace(/^https?:\\/\\/.*\\/entity\\/statement\\//, '')\n  const parts = uri.split('-')\n  return parts[0] + '$' + parts.slice(1).join('-')\n}\n\nconst identifyVars = vars => {\n  const richVars = vars.filter(varName => vars.some(isAssociatedVar(varName)))\n  const associatedVarPattern = new RegExp(`^(${richVars.join('|')})[A-Z]`)\n  const associatedVars = vars.filter(varName => associatedVarPattern.test(varName))\n  const standaloneVars = vars.filter(varName => {\n    return !richVars.includes(varName) && !associatedVarPattern.test(varName)\n  })\n  return { richVars, associatedVars, standaloneVars }\n}\n\nconst isAssociatedVar = varNameA => {\n  const pattern = new RegExp(`^${varNameA}[A-Z]\\\\w+`)\n  return pattern.test.bind(pattern)\n}\n\nconst getSimplifiedResult = (richVars, associatedVars, standaloneVars) => result => {\n  const simplifiedResult = {}\n  for (const varName of richVars) {\n    const richVarData = {}\n    const value = parseValue(result[varName])\n    if (value != null) richVarData.value = value\n    for (const associatedVarName of associatedVars) {\n      if (associatedVarName.startsWith(varName)) addAssociatedValue(result, varName, associatedVarName, richVarData)\n    }\n    if (Object.keys(richVarData).length > 0) simplifiedResult[varName] = richVarData\n  }\n  for (const varName of standaloneVars) {\n    simplifiedResult[varName] = parseValue(result[varName])\n  }\n  return simplifiedResult\n}\n\nconst addAssociatedValue = (result, varName, associatedVarName, richVarData) => {\n  // ex: propertyType => Type\n  let shortAssociatedVarName = associatedVarName.split(varName)[1]\n  // ex: Type => type\n  shortAssociatedVarName = shortAssociatedVarName[0].toLowerCase() + shortAssociatedVarName.slice(1)\n  // ex: altLabel => aliases\n  shortAssociatedVarName = specialNames[shortAssociatedVarName] || shortAssociatedVarName\n  const associatedVarData = result[associatedVarName]\n  if (associatedVarData != null) richVarData[shortAssociatedVarName] = associatedVarData.value\n}\n\nconst specialNames = {\n  altLabel: 'aliases'\n}\n","const { labels, descriptions, aliases, lemmas, glosses } = require('./simplify_text_attributes')\n\nconst {\n  simplifyClaim: claim,\n  simplifyPropertyClaims: propertyClaims,\n  simplifyClaims: claims,\n  simplifyQualifier: qualifier,\n  simplifyPropertyQualifiers: propertyQualifiers,\n  simplifyQualifiers: qualifiers,\n  simplifyReferences: references,\n} = require('./simplify_claims')\n\nconst { simplifyForm: form, simplifyForms: forms } = require('./simplify_forms')\nconst { simplifySense: sense, simplifySenses: senses } = require('./simplify_senses')\n\nconst sitelinks = require('./simplify_sitelinks')\nconst sparqlResults = require('./simplify_sparql_results')\n\nmodule.exports = {\n  labels,\n  descriptions,\n  aliases,\n  claim,\n  propertyClaims,\n  claims,\n  qualifier,\n  propertyQualifiers,\n  qualifiers,\n  references,\n  sitelinks,\n\n  // Aliases\n  snak: claim,\n  propertySnaks: propertyClaims,\n  snaks: claims,\n\n  // Lexemes\n  lemmas,\n  glosses,\n  form,\n  forms,\n  sense,\n  senses,\n\n  sparqlResults\n\n  // Set in ./simplify_entity\n  // entity,\n  // entities,\n}\n","const simplify = require('./simplify')\n\nconst simplifyEntity = (entity, options) => {\n  const { type } = entity\n  const simplified = {\n    id: entity.id,\n    type,\n    modified: entity.modified\n  }\n\n  if (entity.datatype) simplified.datatype = entity.datatype\n\n  if (type === 'item') {\n    simplifyIfDefined(entity, simplified, 'labels')\n    simplifyIfDefined(entity, simplified, 'descriptions')\n    simplifyIfDefined(entity, simplified, 'aliases')\n    simplifyIfDefined(entity, simplified, 'claims', options)\n    simplifyIfDefined(entity, simplified, 'sitelinks', options)\n  } else if (type === 'property') {\n    simplified.datatype = entity.datatype\n    simplifyIfDefined(entity, simplified, 'labels')\n    simplifyIfDefined(entity, simplified, 'descriptions')\n    simplifyIfDefined(entity, simplified, 'aliases')\n    simplifyIfDefined(entity, simplified, 'claims', options)\n  } else if (type === 'lexeme') {\n    simplifyIfDefined(entity, simplified, 'lemmas')\n    simplified.lexicalCategory = entity.lexicalCategory\n    simplified.language = entity.language\n    simplifyIfDefined(entity, simplified, 'claims', options)\n    simplifyIfDefined(entity, simplified, 'forms', options)\n    simplifyIfDefined(entity, simplified, 'senses', options)\n  }\n\n  return simplified\n}\n\nconst simplifyIfDefined = (entity, simplified, attribute, options) => {\n  if (entity[attribute] != null) {\n    simplified[attribute] = simplify[attribute](entity[attribute], options)\n  }\n}\n\nconst simplifyEntities = (entities, options = {}) => {\n  if (entities.entities) entities = entities.entities\n  const { entityPrefix } = options\n  return Object.keys(entities).reduce((obj, key) => {\n    const entity = entities[key]\n    if (entityPrefix) key = `${entityPrefix}:${key}`\n    obj[key] = simplifyEntity(entity, options)\n    return obj\n  }, {})\n}\n\n// Set those here instead of in ./simplify to avoid a circular dependency\nsimplify.entity = simplifyEntity\nsimplify.entities = simplifyEntities\n\nmodule.exports = { simplifyEntity, simplifyEntities }\n","const { simplifyEntity } = require('./simplify_entity')\n\nconst wb = {\n  entities: res => {\n    // Legacy convenience for the time the 'request' lib was all the rage\n    res = res.body || res\n    const { entities } = res\n    Object.keys(entities).forEach(entityId => {\n      entities[entityId] = simplifyEntity(entities[entityId])\n    })\n    return entities\n  },\n\n  pagesTitles: res => {\n    // Same behavior as above\n    res = res.body || res\n    return res.query.search.map(result => result.title)\n  }\n}\n\nmodule.exports = {\n  wb,\n  // Legacy\n  wd: wb\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n","'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n","const isBrowser = typeof location !== 'undefined' && typeof document !== 'undefined'\n\nlet stringifyQuery\nif (isBrowser) {\n  stringifyQuery = queryObj => new URLSearchParams(queryObj).toString()\n} else {\n  // TODO: use URLSearchParams in NodeJS too, but that would mean dropping support for NodeJS < v10\n  stringifyQuery = require('querystring').stringify\n}\n\nmodule.exports = instanceApiEndpoint => queryObj => {\n  // Request CORS headers if the request is made from a browser\n  // See https://www.wikidata.org/w/api.php ('origin' parameter)\n  if (isBrowser) queryObj.origin = '*'\n\n  // Remove null or undefined parameters\n  Object.keys(queryObj).forEach(key => {\n    if (queryObj[key] == null) delete queryObj[key]\n  })\n\n  return instanceApiEndpoint + '?' + stringifyQuery(queryObj)\n}\n","const { isPlainObject } = require('../utils/utils')\nconst types = [ 'item', 'property', 'lexeme', 'form', 'sense' ]\n\nmodule.exports = buildUrl => (search, language, limit, format, uselang) => {\n  // Using the variable 'offset' instead of 'continue' as the later is a reserved word\n  let type, offset\n\n  // polymorphism: arguments can be passed as an object keys\n  if (isPlainObject(search)) {\n    // Not using destructuring assigment there as it messes with both babel and standard\n    const params = search\n    search = params.search\n    language = params.language\n    limit = params.limit\n    offset = params.continue\n    format = params.format\n    uselang = params.uselang\n    type = params.type\n  }\n\n  if (!(search && search.length > 0)) throw new Error(\"search can't be empty\")\n\n  language = language || 'en'\n  uselang = uselang || language\n  limit = limit || '20'\n  format = format || 'json'\n  type = type || 'item'\n  offset = offset || '0'\n\n  if (!types.includes(type)) throw new Error(`invalid type: ${type}`)\n\n  return buildUrl({\n    action: 'wbsearchentities',\n    search,\n    language,\n    limit,\n    continue: offset,\n    format,\n    uselang,\n    type\n  })\n}\n","// See https://www.wikidata.org/w/api.php?action=help&modules=query%2Bsearch\n\nconst { isPlainObject } = require('../utils/utils')\nconst namespacePattern = /^\\d+[|\\d]*$/\n\nmodule.exports = buildUrl => params => {\n  if (!isPlainObject(params)) {\n    throw new Error(`expected parameters to be passed as an object, got ${params} (${typeof params})`)\n  }\n\n  const { search, haswbstatement, format = 'json', limit, offset, profile, sort } = params\n  let { namespace } = params\n\n  if (!(search || haswbstatement)) throw new Error('missing \"search\" or \"haswbstatement\" parameter')\n\n  let srsearch = ''\n  if (search) srsearch += search\n\n  if (haswbstatement) {\n    const statements = haswbstatement instanceof Array ? haswbstatement : [ haswbstatement ]\n    for (const statement of statements) {\n      if (statement[0] === '-') srsearch += ` -haswbstatement:${statement.slice(1)}`\n      else srsearch += ` haswbstatement:${statement}`\n    }\n  }\n\n  if (limit != null && (typeof limit !== 'number' || limit < 1)) {\n    throw new Error(`invalid limit: ${limit}`)\n  }\n\n  if (offset != null && (typeof offset !== 'number' || offset < 0)) {\n    throw new Error(`invalid offset: ${offset}`)\n  }\n\n  if (namespace instanceof Array) namespace = namespace.join('|')\n  else if (typeof namespace === 'number') namespace = namespace.toString()\n\n  if (namespace && !namespacePattern.test(namespace)) {\n    throw new Error(`invalid namespace: ${namespace}`)\n  }\n\n  if (profile != null && typeof profile !== 'string') {\n    throw new Error(`invalid profile: ${profile} (${typeof profile}, expected string)`)\n  }\n\n  if (sort != null && typeof sort !== 'string') {\n    throw new Error(`invalid sort: ${sort} (${typeof sort}, expected string)`)\n  }\n\n  return buildUrl({\n    action: 'query',\n    list: 'search',\n    srsearch: srsearch.trim(),\n    format,\n    srnamespace: namespace,\n    srlimit: limit,\n    sroffset: offset,\n    srqiprofile: profile,\n    srsort: sort,\n  })\n}\n","const helpers = require('./helpers')\n\nconst validate = (name, testName) => value => {\n  if (!helpers[testName](value)) throw new Error(`invalid ${name}: ${value}`)\n}\n\nmodule.exports = {\n  entityId: validate('entity id', 'isEntityId'),\n  propertyId: validate('property id', 'isPropertyId'),\n  entityPageTitle: validate('entity page title', 'isEntityPageTitle'),\n  revisionId: validate('revision id', 'isRevisionId')\n}\n","const { isPlainObject, forceArray, shortLang } = require('../utils/utils')\nconst validate = require('../helpers/validate')\n\nmodule.exports = buildUrl => (ids, languages, props, format, redirects) => {\n  // Polymorphism: arguments can be passed as an object keys\n  if (isPlainObject(ids)) {\n    ({ ids, languages, props, format, redirects } = ids)\n  }\n\n  format = format || 'json'\n\n  // ids can't be let empty\n  if (!(ids && ids.length > 0)) throw new Error('no id provided')\n\n  // Allow to pass ids as a single string\n  ids = forceArray(ids)\n\n  ids.forEach(validate.entityId)\n\n  if (ids.length > 50) {\n    console.warn(`getEntities accepts 50 ids max to match Wikidata API limitations:\n      this request won't get all the desired entities.\n      You can use getManyEntities instead to generate several request urls\n      to work around this limitation`)\n  }\n\n  // Properties can be either one property as a string\n  // or an array or properties;\n  // either case me just want to deal with arrays\n\n  const query = {\n    action: 'wbgetentities',\n    ids: ids.join('|'),\n    format\n  }\n\n  if (redirects === false) query.redirects = 'no'\n\n  if (languages) {\n    languages = forceArray(languages).map(shortLang)\n    query.languages = languages.join('|')\n  }\n\n  if (props && props.length > 0) query.props = forceArray(props).join('|')\n\n  return buildUrl(query)\n}\n","const { isPlainObject } = require('../utils/utils')\n\nmodule.exports = buildUrl => {\n  const getEntities = require('./get_entities')(buildUrl)\n  return (ids, languages, props, format, redirects) => {\n    // Polymorphism: arguments can be passed as an object keys\n    if (isPlainObject(ids)) {\n      ({ ids, languages, props, format, redirects } = ids)\n    }\n\n    if (!(ids instanceof Array)) throw new Error('getManyEntities expects an array of ids')\n\n    return getIdsGroups(ids)\n    .map(idsGroup => getEntities(idsGroup, languages, props, format, redirects))\n  }\n}\n\nconst getIdsGroups = ids => {\n  const groups = []\n  while (ids.length > 0) {\n    const group = ids.slice(0, 50)\n    ids = ids.slice(50)\n    groups.push(group)\n  }\n  return groups\n}\n","const { forceArray } = require('../utils/utils')\nconst validate = require('../helpers/validate')\n\nmodule.exports = buildUrl => (ids, options = {}) => {\n  ids = forceArray(ids)\n  ids.forEach(validate.entityPageTitle)\n\n  const uniqueId = ids.length === 1\n  const query = {\n    action: 'query',\n    prop: 'revisions'\n  }\n\n  query.titles = ids.join('|')\n  query.format = options.format || 'json'\n  if (uniqueId) query.rvlimit = options.limit || 'max'\n  if (uniqueId && options.start) query.rvstart = getEpochSeconds(options.start)\n  if (uniqueId && options.end) query.rvend = getEpochSeconds(options.end)\n\n  const { prop, user, excludeuser, tag } = options\n  if (prop) query.rvprop = forceArray(prop).join('|')\n  if (user) query.rvuser = user\n  if (excludeuser) query.rvexcludeuser = excludeuser\n  if (tag) query.rvtag = tag\n\n  return buildUrl(query)\n}\n\nconst getEpochSeconds = date => {\n  // Return already formatted epoch seconds:\n  // if a date in milliseconds appear to be earlier than 2000-01-01, that's probably\n  // already seconds actually\n  if (typeof date === 'number' && date < earliestPointInMs) return date\n  return Math.trunc(new Date(date).getTime() / 1000)\n}\n\nconst earliestPointInMs = new Date('2000-01-01').getTime()\n","const validate = require('../helpers/validate')\nconst { isPlainObject } = require('../utils/utils')\n\nmodule.exports = (instance, wgScriptPath) => (id, revision) => {\n  if (isPlainObject(id)) {\n    revision = id.revision\n    id = id.id\n  }\n  validate.entityId(id)\n  validate.revisionId(revision)\n  return `${instance}/${wgScriptPath}/index.php?title=Special:EntityData/${id}.json&revision=${revision}`\n}\n","const { isPlainObject, forceArray, shortLang } = require('../utils/utils')\n\nmodule.exports = buildUrl => (titles, sites, languages, props, format, redirects) => {\n  // polymorphism: arguments can be passed as an object keys\n  if (isPlainObject(titles)) {\n    // Not using destructuring assigment there as it messes with both babel and standard\n    const params = titles\n    titles = params.titles\n    sites = params.sites\n    languages = params.languages\n    props = params.props\n    format = params.format\n    redirects = params.redirects\n  }\n\n  format = format || 'json'\n\n  // titles cant be let empty\n  if (!(titles && titles.length > 0)) throw new Error('no titles provided')\n  // default to the English Wikipedia\n  if (!(sites && sites.length > 0)) sites = [ 'enwiki' ]\n\n  // Properties can be either one property as a string\n  // or an array or properties;\n  // either case me just want to deal with arrays\n  titles = forceArray(titles)\n  sites = forceArray(sites).map(parseSite)\n  props = forceArray(props)\n\n  const query = {\n    action: 'wbgetentities',\n    titles: titles.join('|'),\n    sites: sites.join('|'),\n    format\n  }\n\n  // Normalizing only works if there is only one site and title\n  if (sites.length === 1 && titles.length === 1) {\n    query.normalize = true\n  }\n\n  if (languages) {\n    languages = forceArray(languages).map(shortLang)\n    query.languages = languages.join('|')\n  }\n\n  if (props && props.length > 0) query.props = props.join('|')\n\n  if (redirects === false) query.redirects = 'no'\n\n  return buildUrl(query)\n}\n\n// convert 2 letters language code to Wikipedia sitelinks code\nconst parseSite = site => site.length === 2 ? `${site}wiki` : site\n","const { fixedEncodeURIComponent } = require('../utils/utils')\n\nmodule.exports = sparqlEndpoint => sparql => {\n  const query = fixedEncodeURIComponent(sparql)\n  return `${sparqlEndpoint}?format=json&query=${query}`\n}\n","const { forceArray } = require('../utils/utils')\nconst { isItemId } = require('../helpers/helpers')\nconst validate = require('../helpers/validate')\n\n// Fiter-out properties. Can't be filtered by\n// `?subject a wikibase:Item`, as those triples are omitted\n// https://www.mediawiki.org/wiki/Wikibase/Indexing/RDF_Dump_Format#WDQS_data_differences\nconst itemsOnly = 'FILTER NOT EXISTS { ?subject rdf:type wikibase:Property . } '\n\nmodule.exports = sparqlEndpoint => {\n  const sparqlQuery = require('./sparql_query')(sparqlEndpoint)\n  return (property, value, options = {}) => {\n    const { limit, caseInsensitive, keepProperties } = options\n    const valueFn = caseInsensitive ? caseInsensitiveValueQuery : directValueQuery\n    const filter = keepProperties ? '' : itemsOnly\n\n    // Allow to request values for several properties at once\n    let properties = forceArray(property)\n    properties.forEach(validate.propertyId)\n    properties = properties.map(prefixifyProperty).join('|')\n\n    const valueBlock = getValueBlock(value, valueFn, properties, filter)\n    let sparql = `SELECT DISTINCT ?subject WHERE { ${valueBlock} }`\n    if (limit) sparql += ` LIMIT ${limit}`\n    return sparqlQuery(sparql)\n  }\n}\n\nconst getValueBlock = (value, valueFn, properties, filter) => {\n  if (!(value instanceof Array)) {\n    return valueFn(properties, getValueString(value), filter)\n  }\n\n  const valuesBlocks = value\n    .map(getValueString)\n    .map(valStr => valueFn(properties, valStr, filter))\n\n  return '{ ' + valuesBlocks.join('} UNION {') + ' }'\n}\n\nconst getValueString = value => {\n  if (isItemId(value)) {\n    value = `wd:${value}`\n  } else if (typeof value === 'string') {\n    value = `'${value}'`\n  }\n  return value\n}\n\nconst directValueQuery = (properties, value, filter, limit) => {\n  return `?subject ${properties} ${value} .\n    ${filter}`\n}\n\n// Discussion on how to make this query optimal:\n// http://stackoverflow.com/q/43073266/3324977\nconst caseInsensitiveValueQuery = (properties, value, filter, limit) => {\n  return `?subject ${properties} ?value .\n    FILTER (lcase(?value) = ${value.toLowerCase()})\n    ${filter}`\n}\n\nconst prefixifyProperty = property => 'wdt:' + property\n","const { isPlainObject } = require('./utils/utils')\n\nconst simplify = require('./helpers/simplify')\nconst parse = require('./helpers/parse_responses')\nconst helpers = require('./helpers/helpers')\nconst sitelinksHelpers = require('../lib/helpers/sitelinks')\nconst rankHelpers = require('../lib/helpers/rank')\nconst tip = `Tip: if you just want to access functions that don't need an instance or a sparqlEndpoint,\nthose are also exposed directly on the module object. Exemple:\nconst { isItemId, simplify } = require('wikibase-sdk')`\n\nconst common = Object.assign({ simplify, parse }, helpers, sitelinksHelpers, rankHelpers)\n\nconst WBK = config => {\n  if (!isPlainObject(config)) throw new Error('invalid config')\n  const { instance, sparqlEndpoint } = config\n  let { wgScriptPath = 'w' } = config\n\n  wgScriptPath = wgScriptPath.replace(/^\\//, '')\n\n  if (!(instance || sparqlEndpoint)) {\n    throw new Error(`one of instance or sparqlEndpoint should be set at initialization.\\n${tip}`)\n  }\n\n  let wikibaseApiFunctions, instanceRoot, instanceApiEndpoint\n  if (instance) {\n    validateEndpoint('instance', instance)\n\n    instanceRoot = instance\n      .replace(/\\/$/, '')\n      .replace(`/${wgScriptPath}/api.php`, '')\n\n    instanceApiEndpoint = `${instanceRoot}/${wgScriptPath}/api.php`\n\n    const buildUrl = require('./utils/build_url')(instanceApiEndpoint)\n\n    wikibaseApiFunctions = {\n      searchEntities: require('./queries/search_entities')(buildUrl),\n      cirrusSearchPages: require('./queries/cirrus_search')(buildUrl),\n      getEntities: require('./queries/get_entities')(buildUrl),\n      getManyEntities: require('./queries/get_many_entities')(buildUrl),\n      getRevisions: require('./queries/get_revisions')(buildUrl),\n      getEntityRevision: require('./queries/get_entity_revision')(instance, wgScriptPath),\n      getEntitiesFromSitelinks: require('./queries/get_entities_from_sitelinks')(buildUrl)\n    }\n  } else {\n    wikibaseApiFunctions = {\n      searchEntities: missingInstance('searchEntities'),\n      cirrusSearchPages: missingInstance('cirrusSearchPages'),\n      getEntities: missingInstance('getEntities'),\n      getManyEntities: missingInstance('getManyEntities'),\n      getRevisions: missingInstance('getRevisions'),\n      getEntityRevision: missingInstance('getEntityRevision'),\n      getEntitiesFromSitelinks: missingInstance('getEntitiesFromSitelinks')\n    }\n  }\n\n  let wikibaseQueryServiceFunctions\n  if (sparqlEndpoint) {\n    validateEndpoint('sparqlEndpoint', sparqlEndpoint)\n    wikibaseQueryServiceFunctions = {\n      sparqlQuery: require('./queries/sparql_query')(sparqlEndpoint),\n      getReverseClaims: require('./queries/get_reverse_claims')(sparqlEndpoint)\n    }\n  } else {\n    wikibaseQueryServiceFunctions = {\n      sparqlQuery: missingSparqlEndpoint('sparqlQuery'),\n      getReverseClaims: missingSparqlEndpoint('getReverseClaims')\n    }\n  }\n\n  const parsedData = {\n    instance: {\n      root: instanceRoot,\n      apiEndpoint: instanceApiEndpoint\n    }\n  }\n\n  return Object.assign(parsedData, common, wikibaseApiFunctions, wikibaseQueryServiceFunctions)\n}\n\n// Make heplpers that don't require an instance to be specified available\n// directly on the exported function object\nObject.assign(WBK, common)\n\nconst validateEndpoint = (name, url) => {\n  if (!(typeof url === 'string' && url.startsWith('http'))) {\n    throw new Error(`invalid ${name}: ${url}`)\n  }\n}\n\nconst missingConfig = missingParameter => name => () => {\n  throw new Error(`${name} requires ${missingParameter} to be set at initialization`)\n}\n\nconst missingSparqlEndpoint = missingConfig('a sparqlEndpoint')\nconst missingInstance = missingConfig('an instance')\n\nmodule.exports = WBK\n","module.exports = require('wikibase-sdk')({\n  instance: 'https://www.wikidata.org',\n  sparqlEndpoint: 'https://query.wikidata.org/sparql'\n})\n","module.exports={aliceblue:\"#f0f8ff\",antiquewhite:\"#faebd7\",aqua:\"#00ffff\",aquamarine:\"#7fffd4\",azure:\"#f0ffff\",beige:\"#f5f5dc\",bisque:\"#ffe4c4\",black:\"#000000\",blanchedalmond:\"#ffebcd\",blue:\"#0000ff\",blueviolet:\"#8a2be2\",brown:\"#a52a2a\",burlywood:\"#deb887\",cadetblue:\"#5f9ea0\",chartreuse:\"#7fff00\",chocolate:\"#d2691e\",coral:\"#ff7f50\",cornflowerblue:\"#6495ed\",cornsilk:\"#fff8dc\",crimson:\"#dc143c\",cyan:\"#00ffff\",darkblue:\"#00008b\",darkcyan:\"#008b8b\",darkgoldenrod:\"#b8860b\",darkgray:\"#a9a9a9\",darkgrey:\"#a9a9a9\",darkgreen:\"#006400\",darkkhaki:\"#bdb76b\",darkmagenta:\"#8b008b\",darkolivegreen:\"#556b2f\",darkorange:\"#ff8c00\",darkorchid:\"#9932cc\",darkred:\"#8b0000\",darksalmon:\"#e9967a\",darkseagreen:\"#8fbc8f\",darkslateblue:\"#483d8b\",darkslategray:\"#2f4f4f\",darkslategrey:\"#2f4f4f\",darkturquoise:\"#00ced1\",darkviolet:\"#9400d3\",deeppink:\"#ff1493\",deepskyblue:\"#00bfff\",dimgray:\"#696969\",dimgrey:\"#696969\",dodgerblue:\"#1e90ff\",firebrick:\"#b22222\",floralwhite:\"#fffaf0\",forestgreen:\"#228b22\",fuchsia:\"#ff00ff\",gainsboro:\"#dcdcdc\",ghostwhite:\"#f8f8ff\",gold:\"#ffd700\",goldenrod:\"#daa520\",gray:\"#808080\",grey:\"#808080\",green:\"#008000\",greenyellow:\"#adff2f\",honeydew:\"#f0fff0\",hotpink:\"#ff69b4\",indianred:\"#cd5c5c\",indigo:\"#4b0082\",ivory:\"#fffff0\",khaki:\"#f0e68c\",lavender:\"#e6e6fa\",lavenderblush:\"#fff0f5\",lawngreen:\"#7cfc00\",lemonchiffon:\"#fffacd\",lightblue:\"#add8e6\",lightcoral:\"#f08080\",lightcyan:\"#e0ffff\",lightgoldenrodyellow:\"#fafad2\",lightgray:\"#d3d3d3\",lightgrey:\"#d3d3d3\",lightgreen:\"#90ee90\",lightpink:\"#ffb6c1\",lightsalmon:\"#ffa07a\",lightseagreen:\"#20b2aa\",lightskyblue:\"#87cefa\",lightslategray:\"#778899\",lightslategrey:\"#778899\",lightsteelblue:\"#b0c4de\",lightyellow:\"#ffffe0\",lime:\"#00ff00\",limegreen:\"#32cd32\",linen:\"#faf0e6\",magenta:\"#ff00ff\",maroon:\"#800000\",mediumaquamarine:\"#66cdaa\",mediumblue:\"#0000cd\",mediumorchid:\"#ba55d3\",mediumpurple:\"#9370db\",mediumseagreen:\"#3cb371\",mediumslateblue:\"#7b68ee\",mediumspringgreen:\"#00fa9a\",mediumturquoise:\"#48d1cc\",mediumvioletred:\"#c71585\",midnightblue:\"#191970\",mintcream:\"#f5fffa\",mistyrose:\"#ffe4e1\",moccasin:\"#ffe4b5\",navajowhite:\"#ffdead\",navy:\"#000080\",oldlace:\"#fdf5e6\",olive:\"#808000\",olivedrab:\"#6b8e23\",orange:\"#ffa500\",orangered:\"#ff4500\",orchid:\"#da70d6\",palegoldenrod:\"#eee8aa\",palegreen:\"#98fb98\",paleturquoise:\"#afeeee\",palevioletred:\"#db7093\",papayawhip:\"#ffefd5\",peachpuff:\"#ffdab9\",peru:\"#cd853f\",pink:\"#ffc0cb\",plum:\"#dda0dd\",powderblue:\"#b0e0e6\",purple:\"#800080\",rebeccapurple:\"#663399\",red:\"#ff0000\",rosybrown:\"#bc8f8f\",royalblue:\"#4169e1\",saddlebrown:\"#8b4513\",salmon:\"#fa8072\",sandybrown:\"#f4a460\",seagreen:\"#2e8b57\",seashell:\"#fff5ee\",sienna:\"#a0522d\",silver:\"#c0c0c0\",skyblue:\"#87ceeb\",slateblue:\"#6a5acd\",slategray:\"#708090\",slategrey:\"#708090\",snow:\"#fffafa\",springgreen:\"#00ff7f\",steelblue:\"#4682b4\",tan:\"#d2b48c\",teal:\"#008080\",thistle:\"#d8bfd8\",tomato:\"#ff6347\",turquoise:\"#40e0d0\",violet:\"#ee82ee\",wheat:\"#f5deb3\",white:\"#ffffff\",whitesmoke:\"#f5f5f5\",yellow:\"#ffff00\",yellowgreen:\"#9acd32\"};","import * as colors from \"./assets/colors.json\"\n\nexport class Utils {\n\n    /**\n     * In the 'deploy'-step, some code needs to be run by ts-node.\n     * However, ts-node crashes when it sees 'document'. When running from console, we flag this and disable all code where document is needed.\n     * This is a workaround and yet another hack\n     */\n    public static runningFromConsole = typeof window === \"undefined\";\n    public static readonly assets_path = \"./assets/svg/\";\n    public static externalDownloadFunction: (url: string, headers?: any) => Promise<any>;\n    private static knownKeys = [\"addExtraTags\", \"and\", \"calculatedTags\", \"changesetmessage\", \"clustering\", \"color\", \"condition\", \"customCss\", \"dashArray\", \"defaultBackgroundId\", \"description\", \"descriptionTail\", \"doNotDownload\", \"enableAddNewPoints\", \"enableBackgroundLayerSelection\", \"enableGeolocation\", \"enableLayers\", \"enableMoreQuests\", \"enableSearch\", \"enableShareScreen\", \"enableUserBadge\", \"freeform\", \"hideFromOverview\", \"hideInAnswer\", \"icon\", \"iconOverlays\", \"iconSize\", \"id\", \"if\", \"ifnot\", \"isShown\", \"key\", \"language\", \"layers\", \"lockLocation\", \"maintainer\", \"mappings\", \"maxzoom\", \"maxZoom\", \"minNeededElements\", \"minzoom\", \"multiAnswer\", \"name\", \"or\", \"osmTags\", \"passAllFeatures\", \"presets\", \"question\", \"render\", \"roaming\", \"roamingRenderings\", \"rotation\", \"shortDescription\", \"socialImage\", \"source\", \"startLat\", \"startLon\", \"startZoom\", \"tagRenderings\", \"tags\", \"then\", \"title\", \"titleIcons\", \"type\", \"version\", \"wayHandling\", \"widenFactor\", \"width\"]\n    private static extraKeys = [\"nl\", \"en\", \"fr\", \"de\", \"pt\", \"es\", \"name\", \"phone\", \"email\", \"amenity\", \"leisure\", \"highway\", \"building\", \"yes\", \"no\", \"true\", \"false\"]\n    private static injectedDownloads = {}\n    private static _download_cache = new Map<string, { promise: Promise<any>, timestamp: number }>()\n\n    static EncodeXmlValue(str) {\n        if (typeof str !== \"string\") {\n            str = \"\" + str\n        }\n\n        return str.replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n            .replace(/\"/g, '&quot;')\n            .replace(/'/g, '&apos;')\n    }\n\n    /**\n     * Gives a clean float, or undefined if parsing fails\n     * @param str\n     */\n    static asFloat(str): number {\n        if (str) {\n            const i = parseFloat(str);\n            if (isNaN(i)) {\n                return undefined;\n            }\n            return i;\n        }\n        return undefined;\n    }\n\n    public static Upper(str: string) {\n        return str.substr(0, 1).toUpperCase() + str.substr(1);\n    }\n\n    public static TwoDigits(i: number) {\n        if (i < 10) {\n            return \"0\" + i;\n        }\n        return \"\" + i;\n    }\n\n    public static Round(i: number) {\n        if (i < 0) {\n            return \"-\" + Utils.Round(-i);\n        }\n        const j = \"\" + Math.floor(i * 10);\n        if (j.length == 1) {\n            return \"0.\" + j;\n        }\n        return j.substr(0, j.length - 1) + \".\" + j.substr(j.length - 1, j.length);\n    }\n\n    public static Times(f: ((i: number) => string), count: number): string {\n        let res = \"\";\n        for (let i = 0; i < count; i++) {\n            res += f(i);\n        }\n        return res;\n    }\n\n    public static TimesT<T>(count: number, f: ((i: number) => T)): T[] {\n        let res: T[] = [];\n        for (let i = 0; i < count; i++) {\n            res.push(f(i));\n        }\n        return res;\n    }\n\n    public static NoNull<T>(array: T[]): T[] {\n        const ls: T[] = [];\n        for (const t of array) {\n            if (t === undefined || t === null) {\n                continue;\n            }\n            ls.push(t);\n        }\n        return ls;\n    }\n\n    public static Hist(array: string[]): Map<string, number> {\n        const hist = new Map<string, number>();\n        for (const s of array) {\n            hist.set(s, 1 + (hist.get(s) ?? 0))\n        }\n        return hist;\n    }\n\n    public static NoEmpty(array: string[]): string[] {\n        const ls: string[] = [];\n        for (const t of array) {\n            if (t === \"\") {\n                continue;\n            }\n            ls.push(t);\n        }\n        return ls;\n    }\n\n    public static EllipsesAfter(str: string, l: number = 100) {\n        if (str === undefined || str === null) {\n            return undefined;\n        }\n        if (str.length <= l) {\n            return str;\n        }\n        return str.substr(0, l - 3) + \"...\";\n    }\n\n    public static Dedup(arr: string[]): string[] {\n        if (arr === undefined) {\n            return undefined;\n        }\n        const newArr = [];\n        for (const string of arr) {\n            if (newArr.indexOf(string) < 0) {\n                newArr.push(string);\n            }\n        }\n        return newArr;\n    }\n\n    public static Identical<T>(t1: T[], t2: T[], eq?: (t: T, t0: T) => boolean): boolean {\n        if (t1.length !== t2.length) {\n            return false\n        }\n        eq = (a, b) => a === b\n        for (let i = 0; i < t1.length; i++) {\n            if (!eq(t1[i], t2[i])) {\n                return false\n            }\n        }\n        return true;\n    }\n\n    public static MergeTags(a: any, b: any) {\n        const t = {};\n        for (const k in a) {\n            t[k] = a[k];\n        }\n        for (const k in b) {\n            t[k] = b[k];\n        }\n        return t;\n    }\n\n    public static SplitFirst(a: string, sep: string): string[] {\n        const index = a.indexOf(sep);\n        if (index < 0) {\n            return [a];\n        }\n        return [a.substr(0, index), a.substr(index + sep.length)];\n    }\n\n    public static SubstituteKeys(txt: string | undefined, tags: any): string | undefined {\n        if (txt === undefined) {\n            return undefined\n        }\n        const regex = /.*{([^}]*)}.*/\n\n        let match = txt.match(regex)\n\n        while (match) {\n            const key = match[1]\n            txt = txt.replace(\"{\" + key + \"}\", tags[key] ?? \"\")\n            match = txt.match(regex)\n        }\n\n        return txt;\n    }\n\n    public static LoadCustomCss(location: string) {\n        const head = document.getElementsByTagName('head')[0];\n        const link = document.createElement('link');\n        link.id = \"customCss\";\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = location;\n        link.media = 'all';\n        head.appendChild(link);\n        console.log(\"Added custom layout \", location)\n    }\n\n    /**\n     * Copies all key-value pairs of the source into the target. This will change the target\n     * If the key starts with a '+', the values of the list will be appended to the target instead of overwritten\n     * @param source\n     * @param target\n     * @constructor\n     * @return the second parameter as is\n     */\n    static Merge(source: any, target: any) {\n        for (const key in source) {\n            if (!source.hasOwnProperty(key)) {\n                continue\n            }\n            if (key.startsWith(\"+\") || key.endsWith(\"+\")) {\n                const trimmedKey = key.replace(\"+\", \"\");\n                const sourceV = source[key];\n                const targetV = (target[trimmedKey] ?? [])\n\n                let newList: any[];\n                if (key.startsWith(\"+\")) {\n                    newList = sourceV.concat(targetV)\n                } else {\n                    newList = targetV.concat(sourceV)\n                }\n\n                target[trimmedKey] = newList;\n                continue;\n            }\n\n            const sourceV = source[key];\n            const targetV = target[key]\n            if (typeof sourceV === \"object\") {\n                if (sourceV === null) {\n                    target[key] = null\n                } else if (targetV === undefined) {\n                    target[key] = sourceV;\n                } else {\n                    Utils.Merge(sourceV, targetV);\n                }\n\n            } else {\n                target[key] = sourceV;\n            }\n\n        }\n        return target;\n    }\n\n    static getOrSetDefault<K, V>(dict: Map<K, V>, k: K, v: () => V) {\n        let found = dict.get(k);\n        if (found !== undefined) {\n            return found;\n        }\n        dict.set(k, v());\n        return dict.get(k);\n    }\n\n    public static MinifyJSON(stringified: string): string {\n        stringified = stringified.replace(/\\|/g, \"||\");\n\n        const keys = Utils.knownKeys.concat(Utils.extraKeys);\n        for (let i = 0; i < keys.length; i++) {\n            const knownKey = keys[i];\n            let code = i;\n            if (i >= 124) {\n                code += 1; // Character 127 is our 'escape' character |\n            }\n            let replacement = \"|\" + String.fromCharCode(code)\n            stringified = stringified.replace(new RegExp(`\\\"${knownKey}\\\":`, \"g\"), replacement);\n        }\n\n        return stringified;\n    }\n\n    public static UnMinify(minified: string): string {\n\n        if (minified === undefined || minified === null) {\n            return undefined;\n        }\n\n        const parts = minified.split(\"|\");\n        let result = parts.shift();\n        const keys = Utils.knownKeys.concat(Utils.extraKeys);\n\n        for (const part of parts) {\n            if (part == \"\") {\n                // Empty string => this was a || originally\n                result += \"|\"\n                continue\n            }\n            const i = part.charCodeAt(0);\n            result += \"\\\"\" + keys[i] + \"\\\":\" + part.substring(1)\n        }\n\n        return result;\n    }\n\n    public static injectJsonDownloadForTests(url: string, data) {\n        Utils.injectedDownloads[url] = data\n    }\n\n    public static download(url: string, headers?: any): Promise<string> {\n        if (this.externalDownloadFunction !== undefined) {\n            return this.externalDownloadFunction(url, headers)\n        }\n\n        return new Promise((resolve, reject) => {\n                const xhr = new XMLHttpRequest();\n                xhr.onload = () => {\n                    if (xhr.status == 200) {\n                        resolve(xhr.response)\n                    } else if (xhr.status === 509 || xhr.status === 429) {\n                        reject(\"rate limited\")\n                    } else {\n                        reject(xhr.statusText)\n                    }\n                };\n                xhr.open('GET', url);\n                if (headers !== undefined) {\n\n                    for (const key in headers) {\n                        xhr.setRequestHeader(key, headers[key])\n                    }\n                }\n\n                xhr.send();\n                xhr.onerror = reject\n            }\n        )\n    }\n\n    public static async downloadJsonCached(url: string, maxCacheTimeMs: number, headers?: any): Promise<any> {\n        const cached = Utils._download_cache.get(url)\n        if (cached !== undefined) {\n            if ((new Date().getTime() - cached.timestamp) <= maxCacheTimeMs) {\n                return cached.promise\n            }\n        }\n        const promise = /*NO AWAIT as we work with the promise directly */Utils.downloadJson(url, headers)\n        Utils._download_cache.set(url, {promise, timestamp: new Date().getTime()})\n        return await promise\n    }\n\n    public static async downloadJson(url: string, headers?: any): Promise<any> {\n        const injected = Utils.injectedDownloads[url]\n        if (injected !== undefined) {\n            console.log(\"Using injected resource for test for URL\", url)\n            return new Promise((resolve, _) => resolve(injected))\n        }\n        const data = await Utils.download(url, Utils.Merge({\"accept\": \"application/json\"}, headers ?? {}))\n        try {\n            return JSON.parse(data)\n        } catch (e) {\n            console.error(\"Could not parse \", data, \"due to\", e, \"\\n\", e.stack)\n            throw e;\n        }\n    }\n\n    /**\n     * Triggers a 'download file' popup which will download the contents\n     */\n    public static offerContentsAsDownloadableFile(contents: string | Blob, fileName: string = \"download.txt\",\n                                                  options?: { mimetype: string }) {\n        const element = document.createElement(\"a\");\n        let file;\n        if (typeof (contents) === \"string\") {\n            file = new Blob([contents], {type: options?.mimetype ?? 'text/plain'});\n        } else {\n            file = contents;\n        }\n        element.href = URL.createObjectURL(file);\n        element.download = fileName;\n        document.body.appendChild(element); // Required for this to work in FireFox\n        element.click();\n    }\n\n    public static ColourNameToHex(color: string): string {\n        return colors[color.toLowerCase()] ?? color;\n    }\n\n    public static HexToColourName(hex: string): string {\n        hex = hex.toLowerCase()\n        if (!hex.startsWith(\"#\")) {\n            return hex;\n        }\n        const c = Utils.color(hex);\n\n        let smallestDiff = Number.MAX_VALUE;\n        let bestColor = undefined;\n        for (const color in colors) {\n            if (!colors.hasOwnProperty(color)) {\n                continue;\n            }\n            const foundhex = colors[color];\n            if (typeof foundhex !== \"string\") {\n                continue\n            }\n            if (foundhex === hex) {\n                return color\n            }\n            const diff = this.colorDiff(Utils.color(foundhex), c)\n            if (diff > 50) {\n                continue;\n            }\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                bestColor = color;\n            }\n        }\n        return bestColor ?? hex;\n    }\n\n    static sortKeys(o: any) {\n        const copy = {}\n        let keys = Object.keys(o)\n        keys = keys.sort()\n        for (const key of keys) {\n            let v = o[key]\n            if (typeof v === \"object\") {\n                v = Utils.sortKeys(v)\n            }\n            copy[key] = v\n        }\n        return copy\n    }\n\n    public static async waitFor(timeMillis: number): Promise<void> {\n        return new Promise((resolve) => {\n            window.setTimeout(resolve, timeMillis);\n        })\n    }\n\n    public static toHumanTime(seconds): string {\n        seconds = Math.floor(seconds)\n        let minutes = Math.floor(seconds / 60)\n        seconds = seconds % 60\n        let hours = Math.floor(minutes / 60)\n        minutes = minutes % 60\n        let days = Math.floor(hours / 24)\n        hours = hours % 24\n        if (days > 0) {\n            return days + \"days\" + \" \" + hours + \"h\"\n        }\n        return hours + \":\" + Utils.TwoDigits(minutes) + \":\" + Utils.TwoDigits(seconds)\n    }\n\n    public static DisableLongPresses() {\n        // Remove all context event listeners on mobile to prevent long presses\n        window.addEventListener('contextmenu', (e) => { // Not compatible with IE < 9\n\n            if (e.target[\"nodeName\"] === \"INPUT\") {\n                return;\n            }\n            e.preventDefault();\n            return false;\n        }, false);\n\n    }\n\n    public static OsmChaLinkFor(daysInThePast, theme = undefined): string {\n        const now = new Date()\n        const lastWeek = new Date(now.getTime() - daysInThePast * 24 * 60 * 60 * 1000)\n        const date = lastWeek.getFullYear() + \"-\" + Utils.TwoDigits(lastWeek.getMonth() + 1) + \"-\" + Utils.TwoDigits(lastWeek.getDate())\n        let osmcha_link = `{\"date__gte\":[{\"label\":\"${date}\",\"value\":\"${date}\"}],\"editor\":[{\"label\":\"mapcomplete\",\"value\":\"mapcomplete\"}]}`\n        if (theme !== undefined) {\n            osmcha_link = osmcha_link + \",\" + `{\"comment\":[{\"label\":\"#${theme}\",\"value\":\"#${theme}\"}]`\n        }\n        return \"https://osmcha.org/?filters=\" + encodeURIComponent(osmcha_link)\n    }\n\n    private static colorDiff(c0: { r: number, g: number, b: number }, c1: { r: number, g: number, b: number }) {\n        return Math.abs(c0.r - c1.r) + Math.abs(c0.g - c1.g) + Math.abs(c0.b - c1.b);\n    }\n\n    private static color(hex: string): { r: number, g: number, b: number } {\n        if (hex.startsWith == undefined) {\n            console.trace(\"WUT?\", hex)\n            throw \"wut?\"\n        }\n        if (!hex.startsWith(\"#\")) {\n            return undefined;\n        }\n        if (hex.length === 4) {\n            return {\n                r: parseInt(hex.substr(1, 1), 16),\n                g: parseInt(hex.substr(2, 1), 16),\n                b: parseInt(hex.substr(3, 1), 16),\n            }\n        }\n\n        return {\n            r: parseInt(hex.substr(1, 2), 16),\n            g: parseInt(hex.substr(3, 2), 16),\n            b: parseInt(hex.substr(5, 2), 16),\n        }\n    }\n}\n\n","import * as wd from \"wikidata-sdk\"\nimport * as wds from \"wikibase-sdk\"\nimport {Utils} from \"./Utils\";\n\nconst url = wd.getEntities([\"Q42\"])\nconsole.log(url)\nUtils.downloadJson(url).then(async (entities) => {\n    //const parsed = wd.parse.wb.entities(entities)[\"Q42\"]\n    console.log(entities)\n    console.log(wds.simplify.entity(entities.entities[\"Q42\"], {\n        timeConverter: 'simple-day'\n    }))\n})"]}