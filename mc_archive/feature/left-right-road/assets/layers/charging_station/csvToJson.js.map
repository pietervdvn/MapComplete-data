{"version":3,"sources":["assets/colors.json","Utils.ts","assets/layers/charging_station/csvToJson.ts"],"names":["module","exports","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen"],"mappings":"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","file":"csvToJson.js","sourceRoot":"..","sourcesContent":["module.exports={aliceblue:\"#f0f8ff\",antiquewhite:\"#faebd7\",aqua:\"#00ffff\",aquamarine:\"#7fffd4\",azure:\"#f0ffff\",beige:\"#f5f5dc\",bisque:\"#ffe4c4\",black:\"#000000\",blanchedalmond:\"#ffebcd\",blue:\"#0000ff\",blueviolet:\"#8a2be2\",brown:\"#a52a2a\",burlywood:\"#deb887\",cadetblue:\"#5f9ea0\",chartreuse:\"#7fff00\",chocolate:\"#d2691e\",coral:\"#ff7f50\",cornflowerblue:\"#6495ed\",cornsilk:\"#fff8dc\",crimson:\"#dc143c\",cyan:\"#00ffff\",darkblue:\"#00008b\",darkcyan:\"#008b8b\",darkgoldenrod:\"#b8860b\",darkgray:\"#a9a9a9\",darkgrey:\"#a9a9a9\",darkgreen:\"#006400\",darkkhaki:\"#bdb76b\",darkmagenta:\"#8b008b\",darkolivegreen:\"#556b2f\",darkorange:\"#ff8c00\",darkorchid:\"#9932cc\",darkred:\"#8b0000\",darksalmon:\"#e9967a\",darkseagreen:\"#8fbc8f\",darkslateblue:\"#483d8b\",darkslategray:\"#2f4f4f\",darkslategrey:\"#2f4f4f\",darkturquoise:\"#00ced1\",darkviolet:\"#9400d3\",deeppink:\"#ff1493\",deepskyblue:\"#00bfff\",dimgray:\"#696969\",dimgrey:\"#696969\",dodgerblue:\"#1e90ff\",firebrick:\"#b22222\",floralwhite:\"#fffaf0\",forestgreen:\"#228b22\",fuchsia:\"#ff00ff\",gainsboro:\"#dcdcdc\",ghostwhite:\"#f8f8ff\",gold:\"#ffd700\",goldenrod:\"#daa520\",gray:\"#808080\",grey:\"#808080\",green:\"#008000\",greenyellow:\"#adff2f\",honeydew:\"#f0fff0\",hotpink:\"#ff69b4\",indianred:\"#cd5c5c\",indigo:\"#4b0082\",ivory:\"#fffff0\",khaki:\"#f0e68c\",lavender:\"#e6e6fa\",lavenderblush:\"#fff0f5\",lawngreen:\"#7cfc00\",lemonchiffon:\"#fffacd\",lightblue:\"#add8e6\",lightcoral:\"#f08080\",lightcyan:\"#e0ffff\",lightgoldenrodyellow:\"#fafad2\",lightgray:\"#d3d3d3\",lightgrey:\"#d3d3d3\",lightgreen:\"#90ee90\",lightpink:\"#ffb6c1\",lightsalmon:\"#ffa07a\",lightseagreen:\"#20b2aa\",lightskyblue:\"#87cefa\",lightslategray:\"#778899\",lightslategrey:\"#778899\",lightsteelblue:\"#b0c4de\",lightyellow:\"#ffffe0\",lime:\"#00ff00\",limegreen:\"#32cd32\",linen:\"#faf0e6\",magenta:\"#ff00ff\",maroon:\"#800000\",mediumaquamarine:\"#66cdaa\",mediumblue:\"#0000cd\",mediumorchid:\"#ba55d3\",mediumpurple:\"#9370db\",mediumseagreen:\"#3cb371\",mediumslateblue:\"#7b68ee\",mediumspringgreen:\"#00fa9a\",mediumturquoise:\"#48d1cc\",mediumvioletred:\"#c71585\",midnightblue:\"#191970\",mintcream:\"#f5fffa\",mistyrose:\"#ffe4e1\",moccasin:\"#ffe4b5\",navajowhite:\"#ffdead\",navy:\"#000080\",oldlace:\"#fdf5e6\",olive:\"#808000\",olivedrab:\"#6b8e23\",orange:\"#ffa500\",orangered:\"#ff4500\",orchid:\"#da70d6\",palegoldenrod:\"#eee8aa\",palegreen:\"#98fb98\",paleturquoise:\"#afeeee\",palevioletred:\"#db7093\",papayawhip:\"#ffefd5\",peachpuff:\"#ffdab9\",peru:\"#cd853f\",pink:\"#ffc0cb\",plum:\"#dda0dd\",powderblue:\"#b0e0e6\",purple:\"#800080\",rebeccapurple:\"#663399\",red:\"#ff0000\",rosybrown:\"#bc8f8f\",royalblue:\"#4169e1\",saddlebrown:\"#8b4513\",salmon:\"#fa8072\",sandybrown:\"#f4a460\",seagreen:\"#2e8b57\",seashell:\"#fff5ee\",sienna:\"#a0522d\",silver:\"#c0c0c0\",skyblue:\"#87ceeb\",slateblue:\"#6a5acd\",slategray:\"#708090\",slategrey:\"#708090\",snow:\"#fffafa\",springgreen:\"#00ff7f\",steelblue:\"#4682b4\",tan:\"#d2b48c\",teal:\"#008080\",thistle:\"#d8bfd8\",tomato:\"#ff6347\",turquoise:\"#40e0d0\",violet:\"#ee82ee\",wheat:\"#f5deb3\",white:\"#ffffff\",whitesmoke:\"#f5f5f5\",yellow:\"#ffff00\",yellowgreen:\"#9acd32\"};","import * as colors from \"./assets/colors.json\"\nimport {TileRange} from \"./Models/TileRange\";\n\nexport class Utils {\n\n    /**\n     * In the 'deploy'-step, some code needs to be run by ts-node.\n     * However, ts-node crashes when it sees 'document'. When running from console, we flag this and disable all code where document is needed.\n     * This is a workaround and yet another hack\n     */\n    public static runningFromConsole = false;\n    public static readonly assets_path = \"./assets/svg/\";\n    public static externalDownloadFunction: (url: string) => Promise<any>;\n    private static knownKeys = [\"addExtraTags\", \"and\", \"calculatedTags\", \"changesetmessage\", \"clustering\", \"color\", \"condition\", \"customCss\", \"dashArray\", \"defaultBackgroundId\", \"description\", \"descriptionTail\", \"doNotDownload\", \"enableAddNewPoints\", \"enableBackgroundLayerSelection\", \"enableGeolocation\", \"enableLayers\", \"enableMoreQuests\", \"enableSearch\", \"enableShareScreen\", \"enableUserBadge\", \"freeform\", \"hideFromOverview\", \"hideInAnswer\", \"icon\", \"iconOverlays\", \"iconSize\", \"id\", \"if\", \"ifnot\", \"isShown\", \"key\", \"language\", \"layers\", \"lockLocation\", \"maintainer\", \"mappings\", \"maxzoom\", \"maxZoom\", \"minNeededElements\", \"minzoom\", \"multiAnswer\", \"name\", \"or\", \"osmTags\", \"passAllFeatures\", \"presets\", \"question\", \"render\", \"roaming\", \"roamingRenderings\", \"rotation\", \"shortDescription\", \"socialImage\", \"source\", \"startLat\", \"startLon\", \"startZoom\", \"tagRenderings\", \"tags\", \"then\", \"title\", \"titleIcons\", \"type\", \"version\", \"wayHandling\", \"widenFactor\", \"width\"]\n    private static extraKeys = [\"nl\", \"en\", \"fr\", \"de\", \"pt\", \"es\", \"name\", \"phone\", \"email\", \"amenity\", \"leisure\", \"highway\", \"building\", \"yes\", \"no\", \"true\", \"false\"]\n\n    static EncodeXmlValue(str) {\n        if (typeof str !== \"string\") {\n            str = \"\" + str\n        }\n\n        return str.replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n            .replace(/\"/g, '&quot;')\n            .replace(/'/g, '&apos;')\n    }\n\n    /**\n     * Gives a clean float, or undefined if parsing fails\n     * @param str\n     */\n    static asFloat(str): number {\n        if (str) {\n            const i = parseFloat(str);\n            if (isNaN(i)) {\n                return undefined;\n            }\n            return i;\n        }\n        return undefined;\n    }\n\n    public static Upper(str: string) {\n        return str.substr(0, 1).toUpperCase() + str.substr(1);\n    }\n\n    public static TwoDigits(i: number) {\n        if (i < 10) {\n            return \"0\" + i;\n        }\n        return \"\" + i;\n    }\n\n    public static Round(i: number) {\n        if (i < 0) {\n            return \"-\" + Utils.Round(-i);\n        }\n        const j = \"\" + Math.floor(i * 10);\n        if (j.length == 1) {\n            return \"0.\" + j;\n        }\n        return j.substr(0, j.length - 1) + \".\" + j.substr(j.length - 1, j.length);\n    }\n\n    public static Times(f: ((i: number) => string), count: number): string {\n        let res = \"\";\n        for (let i = 0; i < count; i++) {\n            res += f(i);\n        }\n        return res;\n    }\n\n    public static TimesT<T>(count: number, f: ((i: number) => T)): T[] {\n        let res: T[] = [];\n        for (let i = 0; i < count; i++) {\n            res.push(f(i));\n        }\n        return res;\n    }\n\n    static DoEvery(millis: number, f: (() => void)) {\n        if (Utils.runningFromConsole) {\n            return;\n        }\n        window.setTimeout(\n            function () {\n                f();\n                Utils.DoEvery(millis, f);\n            }\n            , millis)\n    }\n\n    public static NoNull<T>(array: T[]): T[] {\n        const ls: T[] = [];\n        for (const t of array) {\n            if (t === undefined || t === null) {\n                continue;\n            }\n            ls.push(t);\n        }\n        return ls;\n    }\n\n    public static NoEmpty(array: string[]): string[] {\n        const ls: string[] = [];\n        for (const t of array) {\n            if (t === \"\") {\n                continue;\n            }\n            ls.push(t);\n        }\n        return ls;\n    }\n\n    public static EllipsesAfter(str: string, l: number = 100) {\n        if (str === undefined || str === null) {\n            return undefined;\n        }\n        if (str.length <= l) {\n            return str;\n        }\n        return str.substr(0, l - 3) + \"...\";\n    }\n\n    public static Dedup(arr: string[]): string[] {\n        if (arr === undefined) {\n            return undefined;\n        }\n        const newArr = [];\n        for (const string of arr) {\n            if (newArr.indexOf(string) < 0) {\n                newArr.push(string);\n            }\n        }\n        return newArr;\n    }\n\n    public static Identical<T>(t1: T[], t2: T[], eq?: (t: T, t0: T) => boolean): boolean {\n        if (t1.length !== t2.length) {\n            return false\n        }\n        eq = (a, b) => a === b\n        for (let i = 0; i < t1.length; i++) {\n            if (!eq(t1[i], t2[i])) {\n                return false\n            }\n        }\n        return true;\n    }\n\n    public static MergeTags(a: any, b: any) {\n        const t = {};\n        for (const k in a) {\n            t[k] = a[k];\n        }\n        for (const k in b) {\n            t[k] = b[k];\n        }\n        return t;\n    }\n\n    public static SplitFirst(a: string, sep: string): string[] {\n        const index = a.indexOf(sep);\n        if (index < 0) {\n            return [a];\n        }\n        return [a.substr(0, index), a.substr(index + sep.length)];\n    }\n\n    public static SubstituteKeys(txt: string, tags: any) {\n        for (const key in tags) {\n            if (!tags.hasOwnProperty(key)) {\n                continue\n            }\n            txt = txt.replace(new RegExp(\"{\" + key + \"}\", \"g\"), tags[key] ?? \"\")\n        }\n        txt = txt.replace(new RegExp('{.*}', \"g\"), \"\")\n        return txt;\n    }\n\n    public static LoadCustomCss(location: string) {\n        const head = document.getElementsByTagName('head')[0];\n        const link = document.createElement('link');\n        link.id = \"customCss\";\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = location;\n        link.media = 'all';\n        head.appendChild(link);\n        console.log(\"Added custom layout \", location)\n    }\n\n    /**\n     * Copies all key-value pairs of the source into the target.\n     * If the key starts with a '+', the values of the list will be appended to the target instead of overwritten\n     * @param source\n     * @param target\n     * @constructor\n     */\n    static Merge(source: any, target: any) {\n        for (const key in source) {\n            if (!source.hasOwnProperty(key)) {\n                continue\n            }\n            if (key.startsWith(\"+\") || key.endsWith(\"+\")) {\n                const trimmedKey = key.replace(\"+\", \"\");\n                const sourceV = source[key];\n                const targetV = (target[trimmedKey] ?? [])\n\n                let newList: any[];\n                if (key.startsWith(\"+\")) {\n                    newList = sourceV.concat(targetV)\n                } else {\n                    newList = targetV.concat(sourceV)\n                }\n\n                target[trimmedKey] = newList;\n                continue;\n            }\n\n            const sourceV = source[key];\n            const targetV = target[key]\n            if (sourceV?.length !== undefined && targetV?.length !== undefined && key.startsWith(\"+\")) {\n                target[key] = targetV.concat(sourceV)\n            } else if (typeof sourceV === \"object\") {\n                if (sourceV === null) {\n                    target[key] = null\n                } else if (targetV === undefined) {\n                    target[key] = sourceV;\n                } else {\n                    Utils.Merge(sourceV, targetV);\n                }\n\n            } else {\n                target[key] = sourceV;\n            }\n\n        }\n        return target;\n    }\n\n    static getOrSetDefault<K, V>(dict: Map<K, V>, k: K, v: () => V) {\n        let found = dict.get(k);\n        if (found !== undefined) {\n            return found;\n        }\n        dict.set(k, v());\n        return dict.get(k);\n\n    }\n\n    /**\n     * Calculates the tile bounds of the\n     * @param z\n     * @param x\n     * @param y\n     * @returns [[maxlat, minlon], [minlat, maxlon]]\n     */\n    static tile_bounds(z: number, x: number, y: number): [[number, number], [number, number]] {\n        return [[Utils.tile2lat(y, z), Utils.tile2long(x, z)], [Utils.tile2lat(y + 1, z), Utils.tile2long(x + 1, z)]]\n    }\n\n    /**\n     * Return x, y of the tile containing (lat, lon) on the given zoom level\n     */\n    static embedded_tile(lat: number, lon: number, z: number): { x: number, y: number, z: number } {\n        return {x: Utils.lon2tile(lon, z), y: Utils.lat2tile(lat, z), z: z}\n    }\n\n    static TileRangeBetween(zoomlevel: number, lat0: number, lon0: number, lat1: number, lon1: number): TileRange {\n        const t0 = Utils.embedded_tile(lat0, lon0, zoomlevel)\n        const t1 = Utils.embedded_tile(lat1, lon1, zoomlevel)\n\n        const xstart = Math.min(t0.x, t1.x)\n        const xend = Math.max(t0.x, t1.x)\n        const ystart = Math.min(t0.y, t1.y)\n        const yend = Math.max(t0.y, t1.y)\n        const total = (1 + xend - xstart) * (1 + yend - ystart)\n\n        return {\n            xstart: xstart,\n            xend: xend,\n            ystart: ystart,\n            yend: yend,\n            total: total,\n            zoomlevel: zoomlevel\n        }\n    }\n\n    public static MinifyJSON(stringified: string): string {\n        stringified = stringified.replace(/\\|/g, \"||\");\n\n        const keys = Utils.knownKeys.concat(Utils.extraKeys);\n        for (let i = 0; i < keys.length; i++) {\n            const knownKey = keys[i];\n            let code = i;\n            if (i >= 124) {\n                code += 1; // Character 127 is our 'escape' character |\n            }\n            let replacement = \"|\" + String.fromCharCode(code)\n            stringified = stringified.replace(new RegExp(`\\\"${knownKey}\\\":`, \"g\"), replacement);\n        }\n\n        return stringified;\n    }\n\n    public static UnMinify(minified: string): string {\n\n        if (minified === undefined || minified === null) {\n            return undefined;\n        }\n\n        const parts = minified.split(\"|\");\n        let result = parts.shift();\n        const keys = Utils.knownKeys.concat(Utils.extraKeys);\n\n        for (const part of parts) {\n            if (part == \"\") {\n                // Empty string => this was a || originally\n                result += \"|\"\n                continue\n            }\n            const i = part.charCodeAt(0);\n            result += \"\\\"\" + keys[i] + \"\\\":\" + part.substring(1)\n        }\n\n        return result;\n    }\n\n    public static MapRange<T>(tileRange: TileRange, f: (x: number, y: number) => T): T[] {\n        const result: T[] = []\n        for (let x = tileRange.xstart; x <= tileRange.xend; x++) {\n            for (let y = tileRange.ystart; y <= tileRange.yend; y++) {\n                const t = f(x, y);\n                result.push(t)\n            }\n        }\n        return result;\n    }\n\n    public static downloadJson(url: string): Promise<any> {\n        if (this.externalDownloadFunction !== undefined) {\n            return this.externalDownloadFunction(url)\n        }\n\n        return new Promise(\n            (resolve, reject) => {\n                try {\n                    const xhr = new XMLHttpRequest();\n                    xhr.onload = () => {\n                        if (xhr.status == 200) {\n                            try {\n                                resolve(JSON.parse(xhr.response))\n                            } catch (e) {\n                                reject(\"Not a valid json: \" + xhr.response)\n                            }\n                        } else {\n                            reject(xhr.statusText)\n                        }\n                    };\n                    xhr.open('GET', url);\n                    xhr.setRequestHeader(\"accept\", \"application/json\")\n                    xhr.send();\n                } catch (e) {\n                    reject(e)\n                }\n            }\n        )\n\n    }\n\n    /**\n     * Triggers a 'download file' popup which will download the contents\n     */\n    public static offerContentsAsDownloadableFile(contents: string | Blob, fileName: string = \"download.txt\",\n                                                  options?: { mimetype: string }) {\n        const element = document.createElement(\"a\");\n        let file;\n        if (typeof (contents) === \"string\") {\n            file = new Blob([contents], {type: options?.mimetype ?? 'text/plain'});\n        } else {\n            file = contents;\n        }\n        element.href = URL.createObjectURL(file);\n        element.download = fileName;\n        document.body.appendChild(element); // Required for this to work in FireFox\n        element.click();\n    }\n\n    public static ColourNameToHex(color: string): string {\n        return colors[color.toLowerCase()] ?? color;\n    }\n\n    public static HexToColourName(hex: string): string {\n        hex = hex.toLowerCase()\n        if (!hex.startsWith(\"#\")) {\n            return hex;\n        }\n        const c = Utils.color(hex);\n\n        let smallestDiff = Number.MAX_VALUE;\n        let bestColor = undefined;\n        for (const color in colors) {\n            if (!colors.hasOwnProperty(color)) {\n                continue;\n            }\n            const foundhex = colors[color];\n            if (typeof foundhex !== \"string\") {\n                continue\n            }\n            if (foundhex === hex) {\n                return color\n            }\n            const diff = this.colorDiff(Utils.color(foundhex), c)\n            if (diff > 50) {\n                continue;\n            }\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                bestColor = color;\n            }\n        }\n        return bestColor ?? hex;\n    }\n\n\n    private static tile2long(x, z) {\n        return (x / Math.pow(2, z) * 360 - 180);\n    }\n\n    private static tile2lat(y, z) {\n        const n = Math.PI - 2 * Math.PI * y / Math.pow(2, z);\n        return (180 / Math.PI * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n))));\n    }\n\n    private static lon2tile(lon, zoom) {\n        return (Math.floor((lon + 180) / 360 * Math.pow(2, zoom)));\n    }\n\n    private static lat2tile(lat, zoom) {\n        return (Math.floor((1 - Math.log(Math.tan(lat * Math.PI / 180) + 1 / Math.cos(lat * Math.PI / 180)) / Math.PI) / 2 * Math.pow(2, zoom)));\n    }\n\n    private static colorDiff(c0: { r: number, g: number, b: number }, c1: { r: number, g: number, b: number }) {\n        return Math.abs(c0.r - c1.r) + Math.abs(c0.g - c1.g) + Math.abs(c0.b - c1.b);\n    }\n\n    private static color(hex: string): { r: number, g: number, b: number } {\n        if (hex.startsWith == undefined) {\n            console.trace(\"WUT?\", hex)\n            throw \"wut?\"\n        }\n        if (!hex.startsWith(\"#\")) {\n            return undefined;\n        }\n        if (hex.length === 4) {\n            return {\n                r: parseInt(hex.substr(1, 1), 16),\n                g: parseInt(hex.substr(2, 1), 16),\n                b: parseInt(hex.substr(3, 1), 16),\n            }\n        }\n\n        return {\n            r: parseInt(hex.substr(1, 2), 16),\n            g: parseInt(hex.substr(3, 2), 16),\n            b: parseInt(hex.substr(5, 2), 16),\n        }\n    }\n\n    public static setDefaults(options, defaults) {\n        if (!(options)) return defaults;\n        for (let key in defaults) {\n            if (!(key in options)) options[key] = defaults[key];\n        }\n        return options;\n    }\n}\n\n","import {readFileSync, writeFileSync} from \"fs\";\nimport {Utils} from \"../../../Utils\";\n\n// SMall script to output the properties of the types.csv as json to add in the tagRenderingGroup. Should be copied manually\nfunction run(file, protojson) {\n    const entries: string[] = Utils.NoNull(readFileSync(file, \"utf8\").split(\"\\n\").map(str => str.trim()))\n    entries.shift()\n\n    const result = []\n    const questions = []\n\n    for (const entry of entries) {\n        const [key, image, description, whitelist] = entry.split(\",\").map(str => str.trim())\n        if (key === \"\") {\n            continue;\n        }\n\n        const json = {\n            if: `${key}=1`,\n            ifnot: `${key}=`,\n            then: `<img style='width:3rem; margin-left: 1rem; margin-right: 1rem' src='./assets/layers/charging_station/${image}'/> ${description}`,\n        \n        }\n\n        if (whitelist) {\n            const countries = whitelist.split(\";\").map(country => \"_country!=\" + country) //HideInAnswer if it is in the wrong country\n            json[\"hideInAnswer\"] = {or:countries}\n        }\n\n        result.push(json)\n\n\n        const indivQ = {\n\n            question: {\n                en: `How much plugs of type ${description} <img style='width:1rem; margin-left: 1rem; margin-right: 1rem' src='./assets/layers/charging_station/${image}'/> are available here?`\n            },\n            render: `There are <b>{${key}}</b>  <img style='width:1rem; margin-left: 1rem; margin-right: 1rem' src='./assets/layers/charging_station/${image}'/> plugs of type ${description} available here`,\n            freeform: {\n                key: key,\n                type: \"pnat\"\n            },\n            condition: `${key}~*`\n\n        }\n\n        questions.push(indivQ)\n    }\n\n    const toggles = {\n        \"question\": {\n            \"en\": \"Which charging stations are available here?\"\n        },\n        \"multiAnswer\": true,\n        \"mappings\": result\n    }\n    questions.unshift(toggles)\n\n    const stringified = questions.map(q => JSON.stringify(q, null, \"  \"))\n    console.log(stringified)\n    let proto = readFileSync(protojson, \"utf8\")\n    proto = proto.replace(\"$$$\", stringified.join(\",\\n\") + \",\")\n    writeFileSync(\"charging_station.json\", proto)\n}\n\ntry {\n    run(\"types.csv\",\"charging_station.protojson\")\n} catch (e) {\n    console.error(e)\n}\n"]}